{"metadata":{"usedHelpers":["typeof","classCallCheck"],"marked":[],"modules":{"imports":[],"exports":{"exported":["listen","shellDir","disable","shellDir"],"specifiers":[{"kind":"local","local":"listen","exported":"listen"},{"kind":"local","local":"shellDir","exported":"shellDir"},{"kind":"local","local":"disable","exported":"disable"},{"kind":"local","local":"shellDir","exported":"shellDir"}]}}},"options":{"filename":"/packages/shell-server/shell-server.js","filenameRelative":"/packages/shell-server/shell-server.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/shell-server/shell-server.js.map","sourceFileName":"/packages/shell-server/shell-server.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"shell-server"},"ignored":false,"code":"module.export({listen:function(){return listen},disable:function(){return disable}});var _classCallCheck;module.import(\"babel-runtime/helpers/classCallCheck\",{\"default\":function(v){_classCallCheck=v}});var _typeof;module.import(\"babel-runtime/helpers/typeof\",{\"default\":function(v){_typeof=v}});\n\nvar assert = require(\"assert\");\nvar path = require(\"path\");\nvar stream = require(\"stream\");\nvar fs = require(\"fs\");\nvar net = require(\"net\");\nvar tty = require(\"tty\");\nvar vm = require(\"vm\");\nvar _ = require(\"underscore\");\nvar INFO_FILE_MODE = parseInt(\"600\", 8); // Only the owner can read or write.\nvar EXITING_MESSAGE = \"Shell exiting...\";\n\n// Invoked by the server process to listen for incoming connections from\n// shell clients. Each connection gets its own REPL instance.\nfunction listen(shellDir) {\n  function callback() {\n    new Server(shellDir).listen();\n  }\n\n  // If the server is still in the very early stages of starting up,\n  // Meteor.startup may not available yet.\n  if ((typeof Meteor === \"undefined\" ? \"undefined\" : _typeof(Meteor)) === \"object\") {\n    Meteor.startup(callback);\n  } else if ((typeof __meteor_bootstrap__ === \"undefined\" ? \"undefined\" : _typeof(__meteor_bootstrap__)) === \"object\") {\n    var hooks = __meteor_bootstrap__.startupHooks;\n    if (hooks) {\n      hooks.push(callback);\n    } else {\n      // As a fallback, just call the callback asynchronously.\n      setImmediate(callback);\n    }\n  }\n}\n\n// Disabling the shell causes all attached clients to disconnect and exit.\nfunction disable(shellDir) {\n  try {\n    // Replace info.json with a file that says the shell server is\n    // disabled, so that any connected shell clients will fail to\n    // reconnect after the server process closes their sockets.\n    fs.writeFileSync(getInfoFile(shellDir), JSON.stringify({\n      status: \"disabled\",\n      reason: \"Shell server has shut down.\"\n    }) + \"\\n\", { mode: INFO_FILE_MODE });\n  } catch (ignored) {}\n}\n\nvar Server = function () {\n  function Server(shellDir) {\n    _classCallCheck(this, Server);\n\n    var self = this;\n    assert.ok(self instanceof Server);\n\n    self.shellDir = shellDir;\n    self.key = Math.random().toString(36).slice(2);\n\n    self.server = net.createServer(function (socket) {\n      self.onConnection(socket);\n    }).on(\"error\", function (err) {\n      console.error(err.stack);\n    });\n  }\n\n  Server.prototype.listen = function listen() {\n    var self = this;\n    var infoFile = getInfoFile(self.shellDir);\n\n    fs.unlink(infoFile, function () {\n      self.server.listen(0, \"127.0.0.1\", function () {\n        fs.writeFileSync(infoFile, JSON.stringify({\n          status: \"enabled\",\n          port: self.server.address().port,\n          key: self.key\n        }) + \"\\n\", {\n          mode: INFO_FILE_MODE\n        });\n      });\n    });\n  };\n\n  Server.prototype.onConnection = function onConnection(socket) {\n    var self = this;\n\n    // Make sure this function doesn't try to write anything to the socket\n    // after it has been closed.\n    socket.on(\"close\", function () {\n      socket = null;\n    });\n\n    // If communication is not established within 1000ms of the first\n    // connection, forcibly close the socket.\n    var timeout = setTimeout(function () {\n      if (socket) {\n        socket.removeAllListeners(\"data\");\n        socket.end(EXITING_MESSAGE + \"\\n\");\n      }\n    }, 1000);\n\n    // Let connecting clients configure certain REPL options by sending a\n    // JSON object over the socket. For example, only the client knows\n    // whether it's running a TTY or an Emacs subshell or some other kind of\n    // terminal, so the client must decide the value of options.terminal.\n    readJSONFromStream(socket, function (error, options, replInputSocket) {\n      clearTimeout(timeout);\n\n      if (error) {\n        socket = null;\n        console.error(error.stack);\n        return;\n      }\n\n      if (options.key !== self.key) {\n        if (socket) {\n          socket.end(EXITING_MESSAGE + \"\\n\");\n        }\n        return;\n      }\n      delete options.key;\n\n      if (options.evaluateAndExit) {\n        evalCommand.call(Object.create(null), // Dummy repl object without ._RecoverableError.\n        \"(\" + options.evaluateAndExit.command + \")\", null, // evalCommand ignores the context parameter, anyway\n        options.evaluateAndExit.filename || \"<meteor shell>\", function (error, result) {\n          if (socket) {\n            var message = error ? {\n              error: error + \"\",\n              code: 1\n            } : {\n              result: result\n            };\n\n            // Sending back a JSON payload allows the client to\n            // distinguish between errors and successful results.\n            socket.end(JSON.stringify(message) + \"\\n\");\n          }\n        });\n        return;\n      }\n      delete options.evaluateAndExit;\n\n      // Immutable options.\n      _.extend(options, {\n        input: replInputSocket,\n        output: socket\n      });\n\n      // Overridable options.\n      _.defaults(options, {\n        prompt: \"> \",\n        terminal: true,\n        useColors: true,\n        useGlobal: true,\n        ignoreUndefined: true\n      });\n\n      self.startREPL(options);\n    });\n  };\n\n  Server.prototype.startREPL = function startREPL(options) {\n    var self = this;\n\n    if (!options.output.columns) {\n      // The REPL's tab completion logic assumes process.stdout is a TTY,\n      // and while that isn't technically true here, we can get tab\n      // completion to behave correctly if we fake the .columns property.\n      options.output.columns = getTerminalWidth();\n    }\n\n    // Make sure this function doesn't try to write anything to the output\n    // stream after it has been closed.\n    options.output.on(\"close\", function () {\n      options.output = null;\n    });\n\n    var repl = self.repl = require(\"repl\").start(options);\n\n    // History persists across shell sessions!\n    self.initializeHistory();\n\n    // Save the global `_` object in the server.  This is probably defined by the\n    // underscore package.  It is unlikely to be the same object as the `var _ =\n    // require('underscore')` in this file!\n    var originalUnderscore = repl.context._;\n\n    Object.defineProperty(repl.context, \"_\", {\n      // Force the global _ variable to remain bound to underscore.\n      get: function get() {\n        return originalUnderscore;\n      },\n\n      // Expose the last REPL result as __ instead of _.\n      set: function set(lastResult) {\n        repl.context.__ = lastResult;\n      },\n\n      enumerable: true,\n\n      // Allow this property to be (re)defined more than once (e.g. each\n      // time the server restarts).\n      configurable: true\n    });\n\n    if (Package.modules) {\n      // Use the same `require` function and `module` object visible to the\n      // application.\n      var toBeInstalled = {};\n      var shellModuleName = \"meteor-shell-\" + Math.random().toString(36).slice(2) + \".js\";\n\n      toBeInstalled[shellModuleName] = function (require, exports, module) {\n        repl.context.module = module;\n        repl.context.require = require;\n\n        // Tab completion sometimes uses require.extensions, but only for\n        // the keys.\n        require.extensions = {\n          \".js\": true,\n          \".json\": true,\n          \".node\": true\n        };\n      };\n\n      // This populates repl.context.{module,require} by evaluating the\n      // module defined above.\n      Package.modules.meteorInstall(toBeInstalled)(\"./\" + shellModuleName);\n    }\n\n    repl.context.repl = repl;\n\n    // Some improvements to the existing help messages.\n    function addHelp(cmd, helpText) {\n      var info = repl.commands[cmd] || repl.commands[\".\" + cmd];\n      if (info) {\n        info.help = helpText;\n      }\n    }\n    addHelp(\"break\", \"Terminate current command input and display new prompt\");\n    addHelp(\"exit\", \"Disconnect from server and leave shell\");\n    addHelp(\"help\", \"Show this help information\");\n\n    // When the REPL exits, signal the attached client to exit by sending it\n    // the special EXITING_MESSAGE.\n    repl.on(\"exit\", function () {\n      if (options.output) {\n        options.output.write(EXITING_MESSAGE + \"\\n\");\n        options.output.end();\n      }\n    });\n\n    // When the server process exits, end the output stream but do not\n    // signal the attached client to exit.\n    process.on(\"exit\", function () {\n      if (options.output) {\n        options.output.end();\n      }\n    });\n\n    // This Meteor-specific shell command rebuilds the application as if a\n    // change was made to server code.\n    repl.defineCommand(\"reload\", {\n      help: \"Restart the server and the shell\",\n      action: function action() {\n        process.exit(0);\n      }\n    });\n\n    // Trigger one recoverable error using the default eval function, just\n    // to capture the Recoverable error constructor, so that our custom\n    // evalCommand function can wrap recoverable errors properly.\n    repl.eval(\"{\", null, \"<meteor shell>\", function (error) {\n      // Capture the Recoverable error constructor.\n      repl._RecoverableError = error && error.constructor;\n\n      // Now set repl.eval to the actual evalCommand function that we want\n      // to use, bound to repl._domain if necessary.\n      repl.eval = repl._domain ? repl._domain.bind(evalCommand) : evalCommand;\n\n      // Terminate the partial evaluation of the { command.\n      repl.commands[\"break\"].action.call(repl);\n    });\n  };\n\n  // This function allows a persistent history of shell commands to be saved\n  // to and loaded from .meteor/local/shell-history.\n\n\n  Server.prototype.initializeHistory = function initializeHistory() {\n    var self = this;\n    var rli = self.repl.rli;\n    var historyFile = getHistoryFile(self.shellDir);\n    var historyFd = fs.openSync(historyFile, \"a+\");\n    var historyLines = fs.readFileSync(historyFile, \"utf8\").split(\"\\n\");\n    var seenLines = Object.create(null);\n\n    if (!rli.history) {\n      rli.history = [];\n      rli.historyIndex = -1;\n    }\n\n    while (rli.history && historyLines.length > 0) {\n      var line = historyLines.pop();\n      if (line && /\\S/.test(line) && !seenLines[line]) {\n        rli.history.push(line);\n        seenLines[line] = true;\n      }\n    }\n\n    rli.addListener(\"line\", function (line) {\n      if (historyFd >= 0 && /\\S/.test(line)) {\n        fs.writeSync(historyFd, line + \"\\n\");\n      }\n    });\n\n    self.repl.on(\"exit\", function () {\n      fs.closeSync(historyFd);\n      historyFd = -1;\n    });\n  };\n\n  return Server;\n}();\n\nfunction readJSONFromStream(inputStream, callback) {\n  var outputStream = new stream.PassThrough();\n  var dataSoFar = \"\";\n\n  function onData(buffer) {\n    var lines = buffer.toString(\"utf8\").split(\"\\n\");\n\n    while (lines.length > 0) {\n      dataSoFar += lines.shift();\n\n      try {\n        var json = JSON.parse(dataSoFar);\n      } catch (error) {\n        if (error instanceof SyntaxError) {\n          continue;\n        }\n\n        return finish(error);\n      }\n\n      if (lines.length > 0) {\n        outputStream.write(lines.join(\"\\n\"));\n      }\n\n      inputStream.pipe(outputStream);\n\n      return finish(null, json);\n    }\n  }\n\n  function onClose() {\n    finish(new Error(\"stream unexpectedly closed\"));\n  }\n\n  var finished = false;\n  function finish(error, json) {\n    if (!finished) {\n      finished = true;\n      inputStream.removeListener(\"data\", onData);\n      inputStream.removeListener(\"error\", finish);\n      inputStream.removeListener(\"close\", onClose);\n      callback(error, json, outputStream);\n    }\n  }\n\n  inputStream.on(\"data\", onData);\n  inputStream.on(\"error\", finish);\n  inputStream.on(\"close\", onClose);\n}\n\nfunction getInfoFile(shellDir) {\n  return path.join(shellDir, \"info.json\");\n}\n\nfunction getHistoryFile(shellDir) {\n  return path.join(shellDir, \"history\");\n}\n\nfunction getTerminalWidth() {\n  try {\n    // Inspired by https://github.com/TooTallNate/ttys/blob/master/index.js\n    var fd = fs.openSync(\"/dev/tty\", \"r\");\n    assert.ok(tty.isatty(fd));\n    var ws = new tty.WriteStream(fd);\n    ws.end();\n    return ws.columns;\n  } catch (fancyApproachWasTooFancy) {\n    return 80;\n  }\n}\n\n// Shell commands need to be executed in a Fiber in case they call into\n// code that yields. Using a Promise is an even better idea, since it runs\n// its callbacks in Fibers drawn from a pool, so the Fibers are recycled.\nvar evalCommandPromise = Promise.resolve();\n\nfunction evalCommand(command, context, filename, callback) {\n  var repl = this;\n\n  function finish(error, result) {\n    if (error) {\n      if (repl._RecoverableError && isRecoverableError(error, repl)) {\n        callback(new repl._RecoverableError(error));\n      } else {\n        callback(error);\n      }\n    } else {\n      callback(null, result);\n    }\n  }\n\n  if (Package.ecmascript) {\n    var noParens = stripParens(command);\n    if (noParens !== command) {\n      var classMatch = /^\\s*class\\s+(\\w+)/.exec(noParens);\n      if (classMatch && classMatch[1] !== \"extends\") {\n        // If the command looks like a named ES2015 class, we remove the\n        // extra layer of parentheses added by the REPL so that the\n        // command will be evaluated as a class declaration rather than as\n        // a named class expression. Note that you can still type (class A\n        // {}) explicitly to evaluate a named class expression. The REPL\n        // code that calls evalCommand handles named function expressions\n        // similarly (first with and then without parentheses), but that\n        // code doesn't know about ES2015 classes, which is why we have to\n        // handle them here.\n        command = noParens;\n      }\n    }\n\n    try {\n      command = Package.ecmascript.ECMAScript.compileForShell(command);\n    } catch (error) {\n      finish(error);\n      return;\n    }\n  }\n\n  try {\n    var script = new vm.Script(command, {\n      filename: filename,\n      displayErrors: false\n    });\n  } catch (parseError) {\n    finish(parseError);\n    return;\n  }\n\n  evalCommandPromise.then(function () {\n    finish(null, script.runInThisContext());\n  })[\"catch\"](finish);\n}\n\nfunction stripParens(command) {\n  if (command.charAt(0) === \"(\" && command.charAt(command.length - 1) === \")\") {\n    return command.slice(1, command.length - 1);\n  }\n  return command;\n}\n\n// The bailOnIllegalToken and isRecoverableError functions are taken from\n// https://github.com/nodejs/node/blob/c9e670ea2a/lib/repl.js#L1227-L1253\nfunction bailOnIllegalToken(parser) {\n  return parser._literal === null && !parser.blockComment && !parser.regExpLiteral;\n}\n\n// If the error is that we've unexpectedly ended the input,\n// then let the user try to recover by adding more input.\nfunction isRecoverableError(e, repl) {\n  if (e && e.name === 'SyntaxError') {\n    var message = e.message;\n    if (message === 'Unterminated template literal' || message === 'Missing } in template expression') {\n      repl._inTemplateLiteral = true;\n      return true;\n    }\n\n    if (message.startsWith('Unexpected end of input') || message.startsWith('missing ) after argument list') || message.startsWith('Unexpected token')) {\n      return true;\n    }\n\n    if (message === 'Invalid or unexpected token') {\n      return !bailOnIllegalToken(repl.lineParser);\n    }\n  }\n\n  return false;\n}","ast":null,"map":{"version":3,"sources":["/packages/shell-server/shell-server.js"],"names":[],"mappings":"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","file":"/packages/shell-server/shell-server.js.map","sourcesContent":["var assert = require(\"assert\");\nvar path = require(\"path\");\nvar stream = require(\"stream\");\nvar fs = require(\"fs\");\nvar net = require(\"net\");\nvar tty = require(\"tty\");\nvar vm = require(\"vm\");\nvar _ = require(\"underscore\");\nvar INFO_FILE_MODE = parseInt(\"600\", 8); // Only the owner can read or write.\nvar EXITING_MESSAGE = \"Shell exiting...\";\n\n// Invoked by the server process to listen for incoming connections from\n// shell clients. Each connection gets its own REPL instance.\nexport function listen(shellDir) {\n  function callback() {\n    new Server(shellDir).listen();\n  }\n\n  // If the server is still in the very early stages of starting up,\n  // Meteor.startup may not available yet.\n  if (typeof Meteor === \"object\") {\n    Meteor.startup(callback);\n  } else if (typeof __meteor_bootstrap__ === \"object\") {\n    var hooks = __meteor_bootstrap__.startupHooks;\n    if (hooks) {\n      hooks.push(callback);\n    } else {\n      // As a fallback, just call the callback asynchronously.\n      setImmediate(callback);\n    }\n  }\n}\n\n// Disabling the shell causes all attached clients to disconnect and exit.\nexport function disable(shellDir) {\n  try {\n    // Replace info.json with a file that says the shell server is\n    // disabled, so that any connected shell clients will fail to\n    // reconnect after the server process closes their sockets.\n    fs.writeFileSync(\n      getInfoFile(shellDir),\n      JSON.stringify({\n        status: \"disabled\",\n        reason: \"Shell server has shut down.\"\n      }) + \"\\n\",\n      { mode: INFO_FILE_MODE }\n    );\n  } catch (ignored) {}\n}\n\nclass Server {\n  constructor(shellDir) {\n    var self = this;\n    assert.ok(self instanceof Server);\n\n    self.shellDir = shellDir;\n    self.key = Math.random().toString(36).slice(2);\n\n    self.server = net.createServer(function(socket) {\n      self.onConnection(socket);\n    }).on(\"error\", function(err) {\n      console.error(err.stack);\n    });\n  }\n\n  listen() {\n    var self = this;\n    var infoFile = getInfoFile(self.shellDir);\n\n    fs.unlink(infoFile, function() {\n      self.server.listen(0, \"127.0.0.1\", function() {\n        fs.writeFileSync(infoFile, JSON.stringify({\n          status: \"enabled\",\n          port: self.server.address().port,\n          key: self.key\n        }) + \"\\n\", {\n          mode: INFO_FILE_MODE\n        });\n      });\n    });\n  }\n\n  onConnection(socket) {\n    var self = this;\n\n    // Make sure this function doesn't try to write anything to the socket\n    // after it has been closed.\n    socket.on(\"close\", function() {\n      socket = null;\n    });\n\n    // If communication is not established within 1000ms of the first\n    // connection, forcibly close the socket.\n    var timeout = setTimeout(function() {\n      if (socket) {\n        socket.removeAllListeners(\"data\");\n        socket.end(EXITING_MESSAGE + \"\\n\");\n      }\n    }, 1000);\n\n    // Let connecting clients configure certain REPL options by sending a\n    // JSON object over the socket. For example, only the client knows\n    // whether it's running a TTY or an Emacs subshell or some other kind of\n    // terminal, so the client must decide the value of options.terminal.\n    readJSONFromStream(socket, function (error, options, replInputSocket) {\n      clearTimeout(timeout);\n\n      if (error) {\n        socket = null;\n        console.error(error.stack);\n        return;\n      }\n\n      if (options.key !== self.key) {\n        if (socket) {\n          socket.end(EXITING_MESSAGE + \"\\n\");\n        }\n        return;\n      }\n      delete options.key;\n\n      if (options.evaluateAndExit) {\n        evalCommand.call(\n          Object.create(null), // Dummy repl object without ._RecoverableError.\n          \"(\" + options.evaluateAndExit.command + \")\",\n          null, // evalCommand ignores the context parameter, anyway\n          options.evaluateAndExit.filename || \"<meteor shell>\",\n          function (error, result) {\n            if (socket) {\n              var message = error ? {\n                error: error + \"\",\n                code: 1\n              } : {\n                result: result\n              };\n\n              // Sending back a JSON payload allows the client to\n              // distinguish between errors and successful results.\n              socket.end(JSON.stringify(message) + \"\\n\");\n            }\n          }\n        );\n        return;\n      }\n      delete options.evaluateAndExit;\n\n      // Immutable options.\n      _.extend(options, {\n        input: replInputSocket,\n        output: socket\n      });\n\n      // Overridable options.\n      _.defaults(options, {\n        prompt: \"> \",\n        terminal: true,\n        useColors: true,\n        useGlobal: true,\n        ignoreUndefined: true,\n      });\n\n      self.startREPL(options);\n    });\n  }\n\n  startREPL(options) {\n    var self = this;\n\n    if (! options.output.columns) {\n      // The REPL's tab completion logic assumes process.stdout is a TTY,\n      // and while that isn't technically true here, we can get tab\n      // completion to behave correctly if we fake the .columns property.\n      options.output.columns = getTerminalWidth();\n    }\n\n    // Make sure this function doesn't try to write anything to the output\n    // stream after it has been closed.\n    options.output.on(\"close\", function() {\n      options.output = null;\n    });\n\n    var repl = self.repl = require(\"repl\").start(options);\n\n    // History persists across shell sessions!\n    self.initializeHistory();\n\n    // Save the global `_` object in the server.  This is probably defined by the\n    // underscore package.  It is unlikely to be the same object as the `var _ =\n    // require('underscore')` in this file!\n    var originalUnderscore = repl.context._;\n\n    Object.defineProperty(repl.context, \"_\", {\n      // Force the global _ variable to remain bound to underscore.\n      get: function () { return originalUnderscore; },\n\n      // Expose the last REPL result as __ instead of _.\n      set: function(lastResult) {\n        repl.context.__ = lastResult;\n      },\n\n      enumerable: true,\n\n      // Allow this property to be (re)defined more than once (e.g. each\n      // time the server restarts).\n      configurable: true\n    });\n\n    if (Package.modules) {\n      // Use the same `require` function and `module` object visible to the\n      // application.\n      var toBeInstalled = {};\n      var shellModuleName = \"meteor-shell-\" +\n        Math.random().toString(36).slice(2) + \".js\";\n\n      toBeInstalled[shellModuleName] = function (require, exports, module) {\n        repl.context.module = module;\n        repl.context.require = require;\n\n        // Tab completion sometimes uses require.extensions, but only for\n        // the keys.\n        require.extensions = {\n          \".js\": true,\n          \".json\": true,\n          \".node\": true,\n        };\n      };\n\n      // This populates repl.context.{module,require} by evaluating the\n      // module defined above.\n      Package.modules.meteorInstall(toBeInstalled)(\"./\" + shellModuleName);\n    }\n\n    repl.context.repl = repl;\n\n    // Some improvements to the existing help messages.\n    function addHelp(cmd, helpText) {\n      var info = repl.commands[cmd] || repl.commands[\".\" + cmd];\n      if (info) {\n        info.help = helpText;\n      }\n    }\n    addHelp(\"break\", \"Terminate current command input and display new prompt\");\n    addHelp(\"exit\", \"Disconnect from server and leave shell\");\n    addHelp(\"help\", \"Show this help information\");\n\n    // When the REPL exits, signal the attached client to exit by sending it\n    // the special EXITING_MESSAGE.\n    repl.on(\"exit\", function() {\n      if (options.output) {\n        options.output.write(EXITING_MESSAGE + \"\\n\");\n        options.output.end();\n      }\n    });\n\n    // When the server process exits, end the output stream but do not\n    // signal the attached client to exit.\n    process.on(\"exit\", function() {\n      if (options.output) {\n        options.output.end();\n      }\n    });\n\n    // This Meteor-specific shell command rebuilds the application as if a\n    // change was made to server code.\n    repl.defineCommand(\"reload\", {\n      help: \"Restart the server and the shell\",\n      action: function() {\n        process.exit(0);\n      }\n    });\n\n    // Trigger one recoverable error using the default eval function, just\n    // to capture the Recoverable error constructor, so that our custom\n    // evalCommand function can wrap recoverable errors properly.\n    repl.eval(\n      \"{\", null, \"<meteor shell>\",\n      function (error) {\n        // Capture the Recoverable error constructor.\n        repl._RecoverableError = error && error.constructor;\n\n        // Now set repl.eval to the actual evalCommand function that we want\n        // to use, bound to repl._domain if necessary.\n        repl.eval = repl._domain\n          ? repl._domain.bind(evalCommand)\n          : evalCommand;\n\n        // Terminate the partial evaluation of the { command.\n        repl.commands[\"break\"].action.call(repl);\n      }\n    );\n  }\n\n  // This function allows a persistent history of shell commands to be saved\n  // to and loaded from .meteor/local/shell-history.\n  initializeHistory() {\n    var self = this;\n    var rli = self.repl.rli;\n    var historyFile = getHistoryFile(self.shellDir);\n    var historyFd = fs.openSync(historyFile, \"a+\");\n    var historyLines = fs.readFileSync(historyFile, \"utf8\").split(\"\\n\");\n    var seenLines = Object.create(null);\n\n    if (! rli.history) {\n      rli.history = [];\n      rli.historyIndex = -1;\n    }\n\n    while (rli.history && historyLines.length > 0) {\n      var line = historyLines.pop();\n      if (line && /\\S/.test(line) && ! seenLines[line]) {\n        rli.history.push(line);\n        seenLines[line] = true;\n      }\n    }\n\n    rli.addListener(\"line\", function(line) {\n      if (historyFd >= 0 && /\\S/.test(line)) {\n        fs.writeSync(historyFd, line + \"\\n\");\n      }\n    });\n\n    self.repl.on(\"exit\", function() {\n      fs.closeSync(historyFd);\n      historyFd = -1;\n    });\n  }\n}\n\nfunction readJSONFromStream(inputStream, callback) {\n  var outputStream = new stream.PassThrough;\n  var dataSoFar = \"\";\n\n  function onData(buffer) {\n    var lines = buffer.toString(\"utf8\").split(\"\\n\");\n\n    while (lines.length > 0) {\n      dataSoFar += lines.shift();\n\n      try {\n        var json = JSON.parse(dataSoFar);\n      } catch (error) {\n        if (error instanceof SyntaxError) {\n          continue;\n        }\n\n        return finish(error);\n      }\n\n      if (lines.length > 0) {\n        outputStream.write(lines.join(\"\\n\"));\n      }\n\n      inputStream.pipe(outputStream);\n\n      return finish(null, json);\n    }\n  }\n\n  function onClose() {\n    finish(new Error(\"stream unexpectedly closed\"));\n  }\n\n  var finished = false;\n  function finish(error, json) {\n    if (! finished) {\n      finished = true;\n      inputStream.removeListener(\"data\", onData);\n      inputStream.removeListener(\"error\", finish);\n      inputStream.removeListener(\"close\", onClose);\n      callback(error, json, outputStream);\n    }\n  }\n\n  inputStream.on(\"data\", onData);\n  inputStream.on(\"error\", finish);\n  inputStream.on(\"close\", onClose);\n}\n\nfunction getInfoFile(shellDir) {\n  return path.join(shellDir, \"info.json\");\n}\n\nfunction getHistoryFile(shellDir) {\n  return path.join(shellDir, \"history\");\n}\n\nfunction getTerminalWidth() {\n  try {\n    // Inspired by https://github.com/TooTallNate/ttys/blob/master/index.js\n    var fd = fs.openSync(\"/dev/tty\", \"r\");\n    assert.ok(tty.isatty(fd));\n    var ws = new tty.WriteStream(fd);\n    ws.end();\n    return ws.columns;\n  } catch (fancyApproachWasTooFancy) {\n    return 80;\n  }\n}\n\n// Shell commands need to be executed in a Fiber in case they call into\n// code that yields. Using a Promise is an even better idea, since it runs\n// its callbacks in Fibers drawn from a pool, so the Fibers are recycled.\nvar evalCommandPromise = Promise.resolve();\n\nfunction evalCommand(command, context, filename, callback) {\n  var repl = this;\n\n  function finish(error, result) {\n    if (error) {\n      if (repl._RecoverableError &&\n          isRecoverableError(error, repl)) {\n        callback(new repl._RecoverableError(error));\n      } else {\n        callback(error);\n      }\n    } else {\n      callback(null, result);\n    }\n  }\n\n  if (Package.ecmascript) {\n    var noParens = stripParens(command);\n    if (noParens !== command) {\n      var classMatch = /^\\s*class\\s+(\\w+)/.exec(noParens);\n      if (classMatch && classMatch[1] !== \"extends\") {\n        // If the command looks like a named ES2015 class, we remove the\n        // extra layer of parentheses added by the REPL so that the\n        // command will be evaluated as a class declaration rather than as\n        // a named class expression. Note that you can still type (class A\n        // {}) explicitly to evaluate a named class expression. The REPL\n        // code that calls evalCommand handles named function expressions\n        // similarly (first with and then without parentheses), but that\n        // code doesn't know about ES2015 classes, which is why we have to\n        // handle them here.\n        command = noParens;\n      }\n    }\n\n    try {\n      command = Package.ecmascript.ECMAScript.compileForShell(command);\n    } catch (error) {\n      finish(error);\n      return;\n    }\n  }\n\n  try {\n    var script = new vm.Script(command, {\n      filename: filename,\n      displayErrors: false\n    });\n  } catch (parseError) {\n    finish(parseError);\n    return;\n  }\n\n  evalCommandPromise.then(function () {\n    finish(null, script.runInThisContext());\n  }).catch(finish);\n}\n\nfunction stripParens(command) {\n  if (command.charAt(0) === \"(\" &&\n      command.charAt(command.length - 1) === \")\") {\n    return command.slice(1, command.length - 1);\n  }\n  return command;\n}\n\n// The bailOnIllegalToken and isRecoverableError functions are taken from\n// https://github.com/nodejs/node/blob/c9e670ea2a/lib/repl.js#L1227-L1253\nfunction bailOnIllegalToken(parser) {\n  return parser._literal === null &&\n    ! parser.blockComment &&\n    ! parser.regExpLiteral;\n}\n\n// If the error is that we've unexpectedly ended the input,\n// then let the user try to recover by adding more input.\nfunction isRecoverableError(e, repl) {\n  if (e && e.name === 'SyntaxError') {\n    var message = e.message;\n    if (message === 'Unterminated template literal' ||\n        message === 'Missing } in template expression') {\n      repl._inTemplateLiteral = true;\n      return true;\n    }\n\n    if (message.startsWith('Unexpected end of input') ||\n        message.startsWith('missing ) after argument list') ||\n        message.startsWith('Unexpected token')) {\n      return true;\n    }\n\n    if (message === 'Invalid or unexpected token') {\n      return ! bailOnIllegalToken(repl.lineParser);\n    }\n  }\n\n  return false;\n}\n"]},"hash":"35632e29de9cdb1f02dbde0fe4d9013b864ceb33"}
