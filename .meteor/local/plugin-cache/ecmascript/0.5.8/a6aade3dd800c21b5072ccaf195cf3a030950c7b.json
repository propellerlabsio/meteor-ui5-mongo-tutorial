{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/propellerlabsio:meteor-ui5-mongo/model/PropertyListBinding-dbg.js","filenameRelative":"/packages/propellerlabsio:meteor-ui5-mongo/model/PropertyListBinding-dbg.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/propellerlabsio:meteor-ui5-mongo/model/PropertyListBinding-dbg.js.map","sourceFileName":"/packages/propellerlabsio:meteor-ui5-mongo/model/PropertyListBinding-dbg.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"PropertyListBinding-dbg"},"ignored":false,"code":"'use strict';\n\n/**\n * @file meteor-ui5-mongo.model.PropertyListBinding.js\n * @copyright PropellerLabs.io 2016\n * @license Apache-2.0\n */\n/* eslint-disable */\n\nsap.ui.define(['jquery.sap.global', 'sap/ui/model/ListBinding', 'sap/ui/model/Context', 'sap/ui/model/ChangeReason'], function (jQuery, ListBinding, Context, ChangeReason) {\n  \"use strict\";\n\n  /**\n   * @summary Constructor for PropertyListBinding\n   *\n   * @class\n   * @description Provides a specialized context binding that can be used to\n   * bind to a Mongo document property that is an array .\n   *\n   * Note: Sorting and filtering have not been implemented yet (v0.1).  This is\n   * planned for (v0.2).\n   *\n   * @param {meteor-ui5-mongo.model.Model} oModel\n   * @param {string} sPath\n   * @param {sap.ui.model.Context} oContext\n   * @param {array} [aSorters] Not supported yet\n   * @param {array} [aFilters] Not supported yet\n   * @param {object} [mParameters]\n   *\n   * @public\n   * @alias meteor-ui5-mongo.model.PropertyListBinding\n   * @extends sap.ui.model.ListBinding\n   */\n\n  var cPropertyListBinding = ListBinding.extend(\"meteor-ui5-mongo.model.PropertyListBinding\", {\n\n    constructor: function constructor(oModel, sPath, oContext, aSorters, aFilters, mParameters) {\n\n      ListBinding.call(this, oModel, sPath, oContext, aSorters, aFilters, mParameters);\n\n      // Set up array for storing contexts\n      this._aContexts = [];\n\n      // Validate filtering and sorting hasn't been requested - not supported yet.\n      if (this.aSorters.length || this.aApplicationFilters.length) {\n        var sError = \"Sorting and filtering not supported yet for binding to arrays.\";\n        jQuery.sap.log.fatal(sError);\n        this.fireRequestFailed({\n          message: sError\n        });\n        return;\n      }\n\n      // Build and run query\n      this._runQuery();\n    }\n\n  });\n\n  /**\n   * @summary Execute Mongo query for current path and context and observe changes.\n   *\n   * @description This method runs the query for this context binding and provides\n   * reactivity by observing changes in the query and firing events on change.\n   * @private\n   */\n  cPropertyListBinding.prototype._runQuery = function () {\n    var _this = this;\n\n    // Stop observing changes in any existing query.  Will run forever otherwise.\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n\n    // Reset existing contexts\n    this._aContexts = [];\n    this._fireChange(ChangeReason.remove);\n\n    // Run query for context.\n    this._oCursor = this.oModel.runQuery(this.sPath, this.oContext, this.aSorters, this.aApplicationFilters);\n\n    // Create query handle so we can observe changes\n    // var that = this;\n    this._oQueryHandle = this._oCursor.observeChanges({\n      addedBefore: function addedBefore(id, fields, before) {\n        _this.fireDataReceived();\n        _this._fireChange(ChangeReason.add);\n      },\n\n      changed: function changed(id, fields) {\n        //TODO performance - work out how to only update data that has changed\n        _this.oModel.refresh();\n      },\n\n      removed: function removed(id) {\n        //TODO performance - work out how to only update data that has changed\n        _this.oModel.refresh();\n      }\n    });\n  };\n\n  /**\n   * Returns an array of binding contexts for the bound target list.\n   *\n   * @description <strong>Note:</strong>The parent class method documentation\n   * indicates tht public usage of this method is deprecated use {@link meteor-ui5-mongo.model.PropertyListBinding.prototype.getCurrentContexts}\n   * instead.\n   *\n   * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts\n   * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index.\n   * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list\n   *\n   * @protected\n   */\n  cPropertyListBinding.prototype.getContexts = function (iStartIndex, iLength) {\n    var _this2 = this;\n\n    // Get document containing property.  We used find instead of findOne to\n    // produce the cursor even though we will only ever get one document\n    // so that we can observeChanges on it.  Just get the first (only) document\n    // from the query handle.\n    this._aContexts = [];\n    var oDocument = this._oCursor.fetch()[0];\n    var aProperty = _.get(oDocument, this.sPath);\n    if (!Array.isArray(aProperty)) {\n      //TODO use standard UI5 error handling here\n      console.error(this.sPath + \" is not an array.\");\n    } else {\n      aProperty.forEach(function (value, index) {\n        // Create context\n        var sPath = _this2.oContext.sPath + \"/\" + _this2.sPath + \"[\" + index + \"]\";\n        var oContext = new Context(_this2.oModel, sPath);\n        _this2._aContexts.push(oContext);\n      });\n    }\n\n    var iStart = iStartIndex === undefined ? 0 : iStartIndex;\n    var iLen = iLength === undefined ? this.oModel.iSizeLimit - iStart : iLength;\n    return this._aContexts.slice(iStart).splice(0, iLen);\n  };\n\n  /**\n   * @summary Clean-up no longer needed resources when this context binding is\n   * destroyed.\n   *\n   * @description Stop observing changes in the existing query or it will run\n   * forever.\n   * @public\n   */\n  cPropertyListBinding.prototype.destroy = function () {\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n  };\n\n  /**\n   * @summary Filters the list according to the filter definitions\n   *\n   * @description <strong>Note:</strong>Support this feature has not been\n   * implemented yet in this model.\n   *\n   * @param {object[]} aFilters Array of filter objects\n   * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies\n   * @return {meteor-ui5-mongo.model.PropertyListBinding} returns <code>this</code> to facilitate method chaining\n   *\n   * @public\n   */\n  cPropertyListBinding.prototype.filter = function (aFilters, sFilterType) {\n    var sError = \"Sorting and filtering not supported yet for binding to arrays.\";\n    jQuery.sap.log.fatal(sError);\n    this.fireRequestFailed({\n      message: sError\n    });\n    return this;\n  };\n\n  /**\n   * @summary Sorts the list according to the sorter object\n   *\n   * @description <strong>Note:</strong>Support this feature has not been\n   * implemented yet in this model.\n   *\n   * @param {sap.ui.model.Sorter|Array} aSorters the Sorter object or an array of sorters which defines the sort order\n   * @return {meteor-ui5-mongo.model.PropertyListBinding} returns <code>this</code> to facilitate method chaining\n   * @public\n   */\n  cPropertyListBinding.prototype.sort = function (aSorters) {\n    var sError = \"Sorting and filtering not supported yet for binding to arrays.\";\n    jQuery.sap.log.fatal(sError);\n    this.fireRequestFailed({\n      message: sError\n    });\n    return this;\n  };\n\n  /**\n   * Returns an array of currently used binding contexts of the bound control\n   *\n   * This method does not trigger any data requests from the backend or delta calculation, but just returns the context\n   * array as last requested by the control. This can be used by the application to get access to the data currently\n   * displayed by a list control.\n   *\n   * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list\n   * @public\n   */\n  cPropertyListBinding.prototype.getCurrentContexts = function () {\n    return this._aContexts;\n  };\n\n  /**\n   * @summary Returns the number of entries in the list.\n   *\n   * @description This might be an estimated or preliminary length, in case\n   * the full length is not known yet, see method isLengthFinal().\n   *\n   * @return {int} returns the number of entries in the list\n   * @public\n   */\n  cPropertyListBinding.prototype.getLength = function () {\n    return this._aContexts.length;\n  };\n\n  /**\n   * @summary Returns whether the length of the list is final\n   *\n   * @description Returns whether the length which can be retrieved using getLength()\n   * is a known, final length, or an preliminary or estimated length which may\n   * change if further data is requested.\n   *\n   * <strong>Note:</strong>Support this feature has not been implemented yet in\n   * this model.\n   *\n   * @return {boolean} returns whether the length is final\n   * @public\n   */\n  cPropertyListBinding.prototype.isLengthFinal = function () {\n    // TODO don't know what to do here yet.  Can't get this method\n    // to trigger and in any case, the only way to calculate if queryHandle.count()\n    // is final is to introduce subscriptions to the model which I've been\n    // keen to avoid as it will complicate the hell out of things whereas\n    // having it outside of the model is quite simple.  There's a discussion\n    // on the issue here:\n    // http://stackoverflow.com/questions/18744665/how-to-get-a-published-collections-total-count-regardless-of-a-specified-limit\n    // In the mean time return false;\n    return false;\n  };\n\n  /**\n   * @summary Returns list of distinct values for the given relative binding path\n   *\n   * @description <strong>Note:</strong>Support this feature has not been implemented\n   * yet in this model.\n   *\n   * @param {string} sPath the relative binding path\n   * @return {Array} the array of distinct values.\n   *\n   * @public\n   */\n  cPropertyListBinding.prototype.getDistinctValues = function (sPath) {\n    // TODO what's supposed to go here?\n    return null;\n  };\n\n  return cPropertyListBinding;\n});\n//# sourceMappingURL=PropertyListBinding.js.map","ast":null,"map":{"version":3,"sources":["/packages/propellerlabsio:meteor-ui5-mongo/model/PropertyListBinding-dbg.js"],"names":[],"mappings":"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","file":"/packages/propellerlabsio:meteor-ui5-mongo/model/PropertyListBinding-dbg.js.map","sourcesContent":["'use strict';\n\n/**\n * @file meteor-ui5-mongo.model.PropertyListBinding.js\n * @copyright PropellerLabs.io 2016\n * @license Apache-2.0\n */\n/* eslint-disable */\nsap.ui.define(['jquery.sap.global', 'sap/ui/model/ListBinding', 'sap/ui/model/Context', 'sap/ui/model/ChangeReason'], function (jQuery, ListBinding, Context, ChangeReason) {\n  \"use strict\";\n\n  /**\n   * @summary Constructor for PropertyListBinding\n   *\n   * @class\n   * @description Provides a specialized context binding that can be used to\n   * bind to a Mongo document property that is an array .\n   *\n   * Note: Sorting and filtering have not been implemented yet (v0.1).  This is\n   * planned for (v0.2).\n   *\n   * @param {meteor-ui5-mongo.model.Model} oModel\n   * @param {string} sPath\n   * @param {sap.ui.model.Context} oContext\n   * @param {array} [aSorters] Not supported yet\n   * @param {array} [aFilters] Not supported yet\n   * @param {object} [mParameters]\n   *\n   * @public\n   * @alias meteor-ui5-mongo.model.PropertyListBinding\n   * @extends sap.ui.model.ListBinding\n   */\n\n  var cPropertyListBinding = ListBinding.extend(\"meteor-ui5-mongo.model.PropertyListBinding\", {\n\n    constructor: function constructor(oModel, sPath, oContext, aSorters, aFilters, mParameters) {\n\n      ListBinding.call(this, oModel, sPath, oContext, aSorters, aFilters, mParameters);\n\n      // Set up array for storing contexts\n      this._aContexts = [];\n\n      // Validate filtering and sorting hasn't been requested - not supported yet.\n      if (this.aSorters.length || this.aApplicationFilters.length) {\n        var sError = \"Sorting and filtering not supported yet for binding to arrays.\";\n        jQuery.sap.log.fatal(sError);\n        this.fireRequestFailed({\n          message: sError\n        });\n        return;\n      }\n\n      // Build and run query\n      this._runQuery();\n    }\n\n  });\n\n  /**\n   * @summary Execute Mongo query for current path and context and observe changes.\n   *\n   * @description This method runs the query for this context binding and provides\n   * reactivity by observing changes in the query and firing events on change.\n   * @private\n   */\n  cPropertyListBinding.prototype._runQuery = function () {\n    var _this = this;\n\n    // Stop observing changes in any existing query.  Will run forever otherwise.\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n\n    // Reset existing contexts\n    this._aContexts = [];\n    this._fireChange(ChangeReason.remove);\n\n    // Run query for context.\n    this._oCursor = this.oModel.runQuery(this.sPath, this.oContext, this.aSorters, this.aApplicationFilters);\n\n    // Create query handle so we can observe changes\n    // var that = this;\n    this._oQueryHandle = this._oCursor.observeChanges({\n      addedBefore: function addedBefore(id, fields, before) {\n        _this.fireDataReceived();\n        _this._fireChange(ChangeReason.add);\n      },\n\n      changed: function changed(id, fields) {\n        //TODO performance - work out how to only update data that has changed\n        _this.oModel.refresh();\n      },\n\n      removed: function removed(id) {\n        //TODO performance - work out how to only update data that has changed\n        _this.oModel.refresh();\n      }\n    });\n  };\n\n  /**\n   * Returns an array of binding contexts for the bound target list.\n   *\n   * @description <strong>Note:</strong>The parent class method documentation\n   * indicates tht public usage of this method is deprecated use {@link meteor-ui5-mongo.model.PropertyListBinding.prototype.getCurrentContexts}\n   * instead.\n   *\n   * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts\n   * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index.\n   * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list\n   *\n   * @protected\n   */\n  cPropertyListBinding.prototype.getContexts = function (iStartIndex, iLength) {\n    var _this2 = this;\n\n    // Get document containing property.  We used find instead of findOne to\n    // produce the cursor even though we will only ever get one document\n    // so that we can observeChanges on it.  Just get the first (only) document\n    // from the query handle.\n    this._aContexts = [];\n    var oDocument = this._oCursor.fetch()[0];\n    var aProperty = _.get(oDocument, this.sPath);\n    if (!Array.isArray(aProperty)) {\n      //TODO use standard UI5 error handling here\n      console.error(this.sPath + \" is not an array.\");\n    } else {\n      aProperty.forEach(function (value, index) {\n        // Create context\n        var sPath = _this2.oContext.sPath + \"/\" + _this2.sPath + \"[\" + index + \"]\";\n        var oContext = new Context(_this2.oModel, sPath);\n        _this2._aContexts.push(oContext);\n      });\n    }\n\n    var iStart = iStartIndex === undefined ? 0 : iStartIndex;\n    var iLen = iLength === undefined ? this.oModel.iSizeLimit - iStart : iLength;\n    return this._aContexts.slice(iStart).splice(0, iLen);\n  };\n\n  /**\n   * @summary Clean-up no longer needed resources when this context binding is\n   * destroyed.\n   *\n   * @description Stop observing changes in the existing query or it will run\n   * forever.\n   * @public\n   */\n  cPropertyListBinding.prototype.destroy = function () {\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n  };\n\n  /**\n   * @summary Filters the list according to the filter definitions\n   *\n   * @description <strong>Note:</strong>Support this feature has not been\n   * implemented yet in this model.\n   *\n   * @param {object[]} aFilters Array of filter objects\n   * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies\n   * @return {meteor-ui5-mongo.model.PropertyListBinding} returns <code>this</code> to facilitate method chaining\n   *\n   * @public\n   */\n  cPropertyListBinding.prototype.filter = function (aFilters, sFilterType) {\n    var sError = \"Sorting and filtering not supported yet for binding to arrays.\";\n    jQuery.sap.log.fatal(sError);\n    this.fireRequestFailed({\n      message: sError\n    });\n    return this;\n  };\n\n  /**\n   * @summary Sorts the list according to the sorter object\n   *\n   * @description <strong>Note:</strong>Support this feature has not been\n   * implemented yet in this model.\n   *\n   * @param {sap.ui.model.Sorter|Array} aSorters the Sorter object or an array of sorters which defines the sort order\n   * @return {meteor-ui5-mongo.model.PropertyListBinding} returns <code>this</code> to facilitate method chaining\n   * @public\n   */\n  cPropertyListBinding.prototype.sort = function (aSorters) {\n    var sError = \"Sorting and filtering not supported yet for binding to arrays.\";\n    jQuery.sap.log.fatal(sError);\n    this.fireRequestFailed({\n      message: sError\n    });\n    return this;\n  };\n\n  /**\n   * Returns an array of currently used binding contexts of the bound control\n   *\n   * This method does not trigger any data requests from the backend or delta calculation, but just returns the context\n   * array as last requested by the control. This can be used by the application to get access to the data currently\n   * displayed by a list control.\n   *\n   * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list\n   * @public\n   */\n  cPropertyListBinding.prototype.getCurrentContexts = function () {\n    return this._aContexts;\n  };\n\n  /**\n   * @summary Returns the number of entries in the list.\n   *\n   * @description This might be an estimated or preliminary length, in case\n   * the full length is not known yet, see method isLengthFinal().\n   *\n   * @return {int} returns the number of entries in the list\n   * @public\n   */\n  cPropertyListBinding.prototype.getLength = function () {\n    return this._aContexts.length;\n  };\n\n  /**\n   * @summary Returns whether the length of the list is final\n   *\n   * @description Returns whether the length which can be retrieved using getLength()\n   * is a known, final length, or an preliminary or estimated length which may\n   * change if further data is requested.\n   *\n   * <strong>Note:</strong>Support this feature has not been implemented yet in\n   * this model.\n   *\n   * @return {boolean} returns whether the length is final\n   * @public\n   */\n  cPropertyListBinding.prototype.isLengthFinal = function () {\n    // TODO don't know what to do here yet.  Can't get this method\n    // to trigger and in any case, the only way to calculate if queryHandle.count()\n    // is final is to introduce subscriptions to the model which I've been\n    // keen to avoid as it will complicate the hell out of things whereas\n    // having it outside of the model is quite simple.  There's a discussion\n    // on the issue here:\n    // http://stackoverflow.com/questions/18744665/how-to-get-a-published-collections-total-count-regardless-of-a-specified-limit\n    // In the mean time return false;\n    return false;\n  };\n\n  /**\n   * @summary Returns list of distinct values for the given relative binding path\n   *\n   * @description <strong>Note:</strong>Support this feature has not been implemented\n   * yet in this model.\n   *\n   * @param {string} sPath the relative binding path\n   * @return {Array} the array of distinct values.\n   *\n   * @public\n   */\n  cPropertyListBinding.prototype.getDistinctValues = function (sPath) {\n    // TODO what's supposed to go here?\n    return null;\n  };\n\n  return cPropertyListBinding;\n});\n//# sourceMappingURL=PropertyListBinding.js.map\n"]},"hash":"a6aade3dd800c21b5072ccaf195cf3a030950c7b"}
