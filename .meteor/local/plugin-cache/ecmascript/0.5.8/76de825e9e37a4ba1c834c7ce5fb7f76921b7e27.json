{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/upsert_compatibility_test.js","filenameRelative":"/packages/mongo/upsert_compatibility_test.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/upsert_compatibility_test.js.map","sourceFileName":"/packages/mongo/upsert_compatibility_test.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"upsert_compatibility_test"},"ignored":false,"code":"Tinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'MONGO' });\n\n  coll.insert({ foo: 1 });\n  var result = coll.upsert({ foo: 1 }, { $set: { foo: 2 } });\n  var updated = coll.findOne({ foo: 2 });\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, { foo: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'MONGO' });\n\n  var result = coll.upsert({ foo: 1 }, { $set: { bar: 2 } });\n  var inserted = coll.findOne({ foo: 1 });\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, { foo: 1, bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'MONGO' });\n\n  coll.insert({ foo: 1, baz: 42 });\n  var result = coll.upsert({ foo: 1 }, { bar: 2 });\n  var updated = coll.findOne({ bar: 2 });\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, { bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'MONGO' });\n\n  var result = coll.upsert({ foo: 1 }, { bar: 2 });\n  var inserted = coll.findOne({ bar: 2 });\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.isTrue(result.insertedId instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, { bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'STRING' });\n\n  coll.insert({ foo: 1 });\n  var result = coll.upsert({ foo: 1 }, { $set: { foo: 2 } });\n  var updated = coll.findOne({ foo: 2 });\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, { foo: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'STRING' });\n\n  var result = coll.upsert({ foo: 1 }, { $set: { bar: 2 } });\n  var inserted = coll.findOne({ foo: 1 });\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, { foo: 1, bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'STRING' });\n\n  coll.insert({ foo: 1, baz: 42 });\n  var result = coll.upsert({ foo: 1 }, { bar: 2 });\n  var updated = coll.findOne({ bar: 2 });\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, { bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'STRING' });\n\n  var result = coll.upsert({ foo: 1 }, { bar: 2 });\n  var inserted = coll.findOne({ bar: 2 });\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, { bar: 2 }), true);\n});\n\nTinytest.add('mongo livedata - native upsert - MONGO passing id insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, { idGeneration: 'MONGO' });\n\n  var result = coll.upsert({ foo: 1 }, { _id: 'meu id' });\n  var inserted = coll.findOne({ _id: 'meu id' });\n\n  test.equal(result.insertedId, 'meu id');\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n\n  test.equal(EJSON.equals(inserted, { _id: 'meu id' }), true);\n});","ast":null,"map":{"version":3,"sources":["/packages/mongo/upsert_compatibility_test.js"],"names":[],"mappings":"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","file":"/packages/mongo/upsert_compatibility_test.js.map","sourcesContent":["Tinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  coll.insert({foo: 1});\n  var result = coll.upsert({foo: 1}, {$set: {foo:2}});\n  var updated = coll.findOne({foo: 2});\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {foo: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {$set: {bar:2}});\n  var inserted = coll.findOne({foo: 1});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId)\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {foo: 1, bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  coll.insert({foo: 1, baz: 42});\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var updated = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var inserted = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.isTrue(result.insertedId instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  coll.insert({foo: 1});\n  var result = coll.upsert({foo: 1}, {$set: {foo:2}});\n  var updated = coll.findOne({foo: 2});\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {foo: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  var result = coll.upsert({foo: 1}, {$set: {bar:2}});\n  var inserted = coll.findOne({foo: 1});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {foo: 1, bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  coll.insert({foo: 1, baz: 42});\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var updated = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var inserted = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - MONGO passing id insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {_id: 'meu id'});\n  var inserted = coll.findOne({_id: 'meu id'});\n\n  test.equal(result.insertedId, 'meu id');\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n\n  test.equal(EJSON.equals(inserted, {_id: 'meu id'}), true);\n});\n"]},"hash":"76de825e9e37a4ba1c834c7ce5fb7f76921b7e27"}
