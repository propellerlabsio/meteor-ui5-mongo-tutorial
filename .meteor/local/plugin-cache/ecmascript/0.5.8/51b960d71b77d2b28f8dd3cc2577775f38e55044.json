{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/propellerlabsio:meteor-ui5-mongo/model/ContextBinding-dbg.js","filenameRelative":"/packages/propellerlabsio:meteor-ui5-mongo/model/ContextBinding-dbg.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/propellerlabsio:meteor-ui5-mongo/model/ContextBinding-dbg.js.map","sourceFileName":"/packages/propellerlabsio:meteor-ui5-mongo/model/ContextBinding-dbg.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"ContextBinding-dbg"},"ignored":false,"code":"'use strict';\n\n/**\n * @file meteor-ui5-mongo.model.ContextBinding.js\n * @copyright PropellerLabs.io 2016\n * @license Apache-2.0\n */\n/* eslint-disable */\n\nsap.ui.define(['sap/ui/model/ContextBinding', 'sap/ui/model/ChangeReason'], function (ContextBinding, ChangeReason) {\n  \"use strict\";\n\n  /**\n   * @summary Constructor for ContextBinding\n   *\n   * @class\n   * @description Provides a specialized context binding that can be used to\n   * bind to a single document in a Meteor Mongo Collection.  It is this type\n   * of ContextBinding that is used when, for example, an object header is\n   * bound to a path like \"/Orders(<_id>)\".\n   *\n   * Each instance of this class observes changes on a query handle to provide reactive updates via firing\n   * events.\n   *\n   * @param {meteor-ui5-mongo.model.Model} oModel\n   * @param {String} sPath\n   * @param {Object} oContext\n   * @param {Object} [mParameters]\n   * @public\n   * @alias meteor-ui5-mongo.model.ContextBinding\n   * @extends sap.ui.model.ContextBinding\n   */\n\n  var cContextBinding = ContextBinding.extend(\"meteor-ui5-mongo.model.ContextBinding\", {\n\n    constructor: function constructor(oModel, sPath, oContext, mParameters, oEvents) {\n      // Call super constructor\n      ContextBinding.call(this, oModel, sPath, oContext, mParameters, oEvents);\n\n      // Execute query.  Although, for reasons I don't understand yet, UI5 is\n      // able to get the property values for this context without running a query,\n      // We need to do so so we can observe changes and reactively update the\n      // data in the front end\n      this._runQuery();\n\n      // Don't know what this does but it's needed - copied from ClientModel.js\n      var that = this;\n      oModel.createBindingContext(sPath, oContext, mParameters, function (oContext) {\n        that.bInitial = false;\n        that.oElementContext = oContext;\n      });\n    }\n  });\n\n  /**\n   * @summary Clean-up no longer needed resources when this ContextBinding is\n   * destroyed.\n   *\n   * @description Stop observing changes in the existing query or it will run\n   * forever.\n   * @public\n   */\n  cContextBinding.prototype.destroy = function () {\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n  };\n\n  /**\n   * @summary Check for changes or optionally force refresh\n   *\n   * @description Code copied from sap.ui.model.ClientContextBinding\n   * @public\n   */\n  cContextBinding.prototype.refresh = function (bForceUpdate) {\n    var that = this;\n    //recreate Context: force update\n    this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function (oContext) {\n      if (that.oElementContext === oContext && !bForceUpdate) {\n        that.oModel.checkUpdate(true, oContext);\n      } else {\n        that.oElementContext = oContext;\n        that._fireChange();\n      }\n    }, true);\n  };\n\n  /**\n   * @description Code copied from sap.ui.model.ClientContextBinding\n   * @public\n   */\n  cContextBinding.prototype.initialize = function () {\n    var that = this;\n    //recreate Context: force update\n    this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function (oContext) {\n      that.oElementContext = oContext;\n      that._fireChange();\n    }, true);\n  };\n\n  /**\n   * @description Code copied from sap.ui.model.ClientContextBinding\n   * @public\n   */\n  cContextBinding.prototype.setContext = function (oContext) {\n    var that = this;\n    if (this.oContext != oContext) {\n      this.oContext = oContext;\n      this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function (oContext) {\n        that.oElementContext = oContext;\n        that._fireChange();\n      });\n    }\n  };\n\n  /**\n   * @summary Execute Mongo query for current path and context and observe changes.\n   *\n   * @description This method runs the query for this ContextBinding and provides\n   * reactivity by observing changes in the query and firing events on change.\n   * @private\n   */\n  cContextBinding.prototype._runQuery = function () {\n    var _this = this;\n\n    // Stop observing changes in any existing query.  Will run forever otherwise.\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n\n    // Run query\n    var oCursor = this.oModel.runQuery(this.sPath, this.oContext);\n\n    // Create query handle so we can observe changes\n    this._oQueryHandle = oCursor.observeChanges({\n      addedBefore: function addedBefore(id, fields, before) {\n        _this.fireDataReceived();\n        _this._fireChange(ChangeReason.add);\n      },\n\n      changed: function changed(id, fields) {\n        _this._fireChange(ChangeReason.change);\n      },\n\n      removed: function removed(id) {\n        _this._fireChange(ChangeReason.remove);\n      }\n    });\n  };\n\n  return cContextBinding;\n});\n//# sourceMappingURL=ContextBinding.js.map","ast":null,"map":{"version":3,"sources":["/packages/propellerlabsio:meteor-ui5-mongo/model/ContextBinding-dbg.js"],"names":[],"mappings":"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","file":"/packages/propellerlabsio:meteor-ui5-mongo/model/ContextBinding-dbg.js.map","sourcesContent":["'use strict';\n\n/**\n * @file meteor-ui5-mongo.model.ContextBinding.js\n * @copyright PropellerLabs.io 2016\n * @license Apache-2.0\n */\n/* eslint-disable */\n\nsap.ui.define(['sap/ui/model/ContextBinding', 'sap/ui/model/ChangeReason'], function (ContextBinding, ChangeReason) {\n  \"use strict\";\n\n  /**\n   * @summary Constructor for ContextBinding\n   *\n   * @class\n   * @description Provides a specialized context binding that can be used to\n   * bind to a single document in a Meteor Mongo Collection.  It is this type\n   * of ContextBinding that is used when, for example, an object header is\n   * bound to a path like \"/Orders(<_id>)\".\n   *\n   * Each instance of this class observes changes on a query handle to provide reactive updates via firing\n   * events.\n   *\n   * @param {meteor-ui5-mongo.model.Model} oModel\n   * @param {String} sPath\n   * @param {Object} oContext\n   * @param {Object} [mParameters]\n   * @public\n   * @alias meteor-ui5-mongo.model.ContextBinding\n   * @extends sap.ui.model.ContextBinding\n   */\n\n  var cContextBinding = ContextBinding.extend(\"meteor-ui5-mongo.model.ContextBinding\", {\n\n    constructor: function constructor(oModel, sPath, oContext, mParameters, oEvents) {\n      // Call super constructor\n      ContextBinding.call(this, oModel, sPath, oContext, mParameters, oEvents);\n\n      // Execute query.  Although, for reasons I don't understand yet, UI5 is\n      // able to get the property values for this context without running a query,\n      // We need to do so so we can observe changes and reactively update the\n      // data in the front end\n      this._runQuery();\n\n      // Don't know what this does but it's needed - copied from ClientModel.js\n      var that = this;\n      oModel.createBindingContext(sPath, oContext, mParameters, function (oContext) {\n        that.bInitial = false;\n        that.oElementContext = oContext;\n      });\n    }\n  });\n\n  /**\n   * @summary Clean-up no longer needed resources when this ContextBinding is\n   * destroyed.\n   *\n   * @description Stop observing changes in the existing query or it will run\n   * forever.\n   * @public\n   */\n  cContextBinding.prototype.destroy = function () {\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n  };\n\n  /**\n   * @summary Check for changes or optionally force refresh\n   *\n   * @description Code copied from sap.ui.model.ClientContextBinding\n   * @public\n   */\n  cContextBinding.prototype.refresh = function (bForceUpdate) {\n    var that = this;\n    //recreate Context: force update\n    this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function (oContext) {\n      if (that.oElementContext === oContext && !bForceUpdate) {\n        that.oModel.checkUpdate(true, oContext);\n      } else {\n        that.oElementContext = oContext;\n        that._fireChange();\n      }\n    }, true);\n  };\n\n  /**\n   * @description Code copied from sap.ui.model.ClientContextBinding\n   * @public\n   */\n  cContextBinding.prototype.initialize = function () {\n    var that = this;\n    //recreate Context: force update\n    this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function (oContext) {\n      that.oElementContext = oContext;\n      that._fireChange();\n    }, true);\n  };\n\n  /**\n   * @description Code copied from sap.ui.model.ClientContextBinding\n   * @public\n   */\n  cContextBinding.prototype.setContext = function (oContext) {\n    var that = this;\n    if (this.oContext != oContext) {\n      this.oContext = oContext;\n      this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function (oContext) {\n        that.oElementContext = oContext;\n        that._fireChange();\n      });\n    }\n  };\n\n  /**\n   * @summary Execute Mongo query for current path and context and observe changes.\n   *\n   * @description This method runs the query for this ContextBinding and provides\n   * reactivity by observing changes in the query and firing events on change.\n   * @private\n   */\n  cContextBinding.prototype._runQuery = function () {\n    var _this = this;\n\n    // Stop observing changes in any existing query.  Will run forever otherwise.\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n\n    // Run query\n    var oCursor = this.oModel.runQuery(this.sPath, this.oContext);\n\n    // Create query handle so we can observe changes\n    this._oQueryHandle = oCursor.observeChanges({\n      addedBefore: function addedBefore(id, fields, before) {\n        _this.fireDataReceived();\n        _this._fireChange(ChangeReason.add);\n      },\n\n      changed: function changed(id, fields) {\n        _this._fireChange(ChangeReason.change);\n      },\n\n      removed: function removed(id) {\n        _this._fireChange(ChangeReason.remove);\n      }\n    });\n  };\n\n  return cContextBinding;\n});\n//# sourceMappingURL=ContextBinding.js.map\n"]},"hash":"51b960d71b77d2b28f8dd3cc2577775f38e55044"}
