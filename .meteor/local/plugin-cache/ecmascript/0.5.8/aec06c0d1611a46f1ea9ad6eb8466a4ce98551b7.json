{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/propellerlabsio:meteor-ui5-mongo/model/Model-dbg.js","filenameRelative":"/packages/propellerlabsio:meteor-ui5-mongo/model/Model-dbg.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/propellerlabsio:meteor-ui5-mongo/model/Model-dbg.js.map","sourceFileName":"/packages/propellerlabsio:meteor-ui5-mongo/model/Model-dbg.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"Model-dbg"},"ignored":false,"code":"'use strict';\n\n/**\n * @file meteor-ui5-mongo.model.Model.js\n * @copyright PropellerLabs.io 2016\n * @license Apache-2.0\n *\n * @namespace meteor-ui5-mongo.model\n * @description Meteor UI5 Mongo Model\n */\n/* eslint-disable */\n\nsap.ui.define(['jquery.sap.global', 'sap/ui/model/Model', 'sap/ui/model/BindingMode', 'sap/ui/model/Context', './DocumentListBinding', './PropertyListBinding', './PropertyBinding', './ContextBinding', 'sap/ui/model/FilterOperator'], function (jQuery, Model, BindingMode, Context, DocumentListBinding, PropertyListBinding, PropertyBinding, ContextBinding, FilterOperator) {\n  \"use strict\";\n\n  /**\n   * @summary Constructor for a new Model.\n   *\n   * @description This model provides the interface between UI5 and a Meteor\n   * application that uses  the Mongo and Minimongo databases.\n   *\n   * @class\n   *\n   * @extends sap.ui.model.Model\n   *\n   * @author PropellerLabs.io\n   * @version ${version}\n   *\n   * @constructor\n   * @public\n   * @alias meteor-ui5-mongo.model.Model\n   */\n\n  var cModel = Model.extend(\"meteor-ui5-mongo.model.Model\", {\n\n    constructor: function constructor(iSizeLimit) {\n      Model.apply(this, arguments);\n\n      this.oData = {};\n      this.bDestroyed = false;\n      this.aBindings = [];\n      this.mContexts = {};\n      this.iSizeLimit = iSizeLimit || 100;\n      this.sDefaultBindingMode = BindingMode.OneWay;\n      this.mSupportedBindingModes = {\n        \"OneWay\": true,\n        \"TwoWay\": false,\n        \"OneTime\": false\n      };\n      this.bLegacySyntax = false;\n      this.sUpdateTimer = null;\n    }\n\n  });\n\n  /**\n   * Return new PropertyBinding for given parameters\n   *\n   * @param {string}\n   *         sPath the path pointing to the property that should be bound\n   * @param {object}\n   *         [oContext=null] the context object for this databinding (optional)\n   * @param {object}\n   *         [mParameters=null] additional model specific parameters (optional)\n   * @return {meteor-ui5-mongo.model.PropertyBinding}\n   *\n   * @public\n   */\n  cModel.prototype.bindProperty = function (sPath, oContext, mParameters) {\n    var oBinding = new PropertyBinding(this, sPath, oContext, mParameters);\n    return oBinding;\n  };\n\n  /**\n   * @summary Return new list binding of appropriate type for given parameters\n   *\n   * @description Returns either a DocumentListBinding or PropetyListBinding\n   * depending on whether we are binding to a list of documents or an array\n   * property in a single document.\n   *\n   * @param {string}\n   *         sPath the path pointing to the list / array that should be bound\n   * @param {object}\n   *         [oContext=null] the context object for this databinding (optional)\n   * @param {sap.ui.model.Sorter}\n   *         [aSorters=null] initial sort order (can be either a sorter or an array of sorters) (optional)\n   * @param {array}\n   *         [aFilters=null] predefined filter/s (can be either a filter or an array of filters) (optional)\n   * @param {object}\n   *         [mParameters=null] additional model specific parameters (optional)\n   * @return {meteor-ui5-mongo.model.DocumentListBinding |\n   *         meteor-ui5-mongo.model.PropertyListBinding}\n    * @public\n   */\n  cModel.prototype.bindList = function (sPath, oContext, aSorters, aFilters, mParameters) {\n    var oBinding;\n    if (oContext) {\n      // Binding list to array property in single document\n      oBinding = new PropertyListBinding(this, sPath, oContext, aSorters, aFilters, mParameters);\n    } else {\n      // Binding list to documents in Mongo\n      oBinding = new DocumentListBinding(this, sPath, oContext, aSorters, aFilters, mParameters);\n    }\n    return oBinding;\n  };\n\n  /**\n   * @summary Tree binding not yet implemented.\n   *\n   * @param {string}\n   *         sPath the path pointing to the tree / array that should be bound\n   * @param {object}\n   *         [oContext=null] the context object for this databinding (optional)\n   * @param {array}\n   *         [aFilters=null] predefined filter/s contained in an array (optional)\n   * @param {object}\n   *         [mParameters=null] additional model specific parameters (optional)\n   * @param {array}\n   *         [aSorters=null] predefined sap.ui.model.sorter/s contained in an array (optional)\n   * @return {meteor-ui5-mongo.model.TreeBinding}\n    * @public\n   */\n  // TODO implement this.  Check first if controls that use this haven't all been\n  // deprecated.\n\n  /**\n   * @summary Create binding context.\n   *\n   * @description Implementation copied from sap.ui.model.ClientModel\n   *\n   * @param {string}\n   *         sPath the path to create the new context from\n   * @param {object}\n   *\t\t   [oContext=null] the context which should be used to create the new binding context\n   * @param {object}\n   *\t\t   [mParameters=null] the parameters used to create the new binding context\n   * @param {function}\n   *         [fnCallBack] the function which should be called after the binding context has been created\n   * @param {boolean}\n   *         [bReload] force reload even if data is already available. For server side models this should\n   *                   refetch the data from the server\n   * @return {sap.ui.model.Context} the binding context, if it could be created synchronously\n   *\n   * @public\n   */\n  cModel.prototype.createBindingContext = function (sPath, oContext, mParameters, fnCallBack) {\n    // optional parameter handling\n    if (typeof oContext == \"function\") {\n      fnCallBack = oContext;\n      oContext = null;\n    }\n    if (typeof mParameters == \"function\") {\n      fnCallBack = mParameters;\n      mParameters = null;\n    }\n    // resolve path and create context\n    var sContextPath = this.resolve(sPath, oContext),\n        oNewContext = sContextPath == undefined ? undefined : this.getContext(sContextPath ? sContextPath : \"/\");\n    if (!oNewContext) {\n      oNewContext = null;\n    }\n    if (fnCallBack) {\n      fnCallBack(oNewContext);\n    }\n    return oNewContext;\n  };\n\n  /**\n   * @summary Destroys a binding context\n   *\n   * @param {object}\n   *         oContext to destroy\n   * @public\n   */\n  cModel.prototype.destroyBindingContext = function (oContext) {\n    if (oContext.hasOwnProperty(\"destroy\")) {\n      oContext.destroy();\n    }\n  };\n\n  /**\n   * @summary Returns the value of a property at a given path in a given context.\n   *\n   * @description Resolves a context and path and returns the value (of any\n   * data type).  This method also handles Lookup Property paths in the form of\n   * ?Customers(\"CustomerID\") where ?Customers is the Mongo collection to be\n   * queried and \"CustomerId\" is the name of the property at the current path\n   * that contains the unique Mongo Id of the customer document.\n   * @see meteor-ui5-mongo.model.Model.prototype._getLookupProperty\n   *\n   * @param {string}\n   *         sPath the path to where to read the attribute value\n   * @param {object}\n   *\t\t   [oContext=null] the context with which the path should be resolved\n   * @return {object|object[]|string|number}\n   * @public\n   */\n  cModel.prototype.getProperty = function (sPath, oContext) {\n    var propertyValue = void 0;\n\n    // Check we have a context or we can't return a property - not yet sure\n    // why this is sometimes being called when context hasn't been set yet\n    // (ie from Grid Table)\n    if (!oContext) {\n      return;\n    }\n\n    // Get single document\n    var oComponents = this._getPathComponents(sPath, oContext);\n    // collectionName: \"\",\n    // documentId: \"\",\n    // propertyPath: \"\",\n    var document = Mongo.Collection.get(oComponents.collectionName).findOne(oComponents.documentId);\n    if (document) {\n      if (oComponents.propertyPath) {\n        // Return property\n        if (oComponents.propertyPath.charAt(0) === \"?\") {\n          propertyValue = this._getLookupProperty(document, oComponents.propertyPath);\n        } else {\n          // Regular property - get from current document\n          propertyValue = this._get(document, oComponents.propertyPath);\n        }\n      } else {\n        // Return document (e.g. called by getObject)\n        propertyValue = document;\n      }\n    }\n\n    return propertyValue;\n  };\n\n  /**\n   * @summary Returns the value of a property for a lookup query\n   *\n   * @description This method handles Lookup Property paths in the form of\n   * ?Customers(\"CustomerID\") where ?Customers is the Mongo collection to be\n   * queried and \"CustomerId\" is the name of the property in the current document\n   * that contains the unique Mongo Id of the customer document.\n   *\n   * @param {object}\n   *\t\t   oCurrentDocument the document containing the id of the lookup document\n   * @param {string}\n   *         sLookupPath the path to where to read the attribute value\n   * @return {object|object[]|string|number}\n   * @private\n   */\n  cModel.prototype._getLookupProperty = function (oCurrentDocument, sLookupPath) {\n    // Build context path for querying lookup collection.  Note:\n    // components.documentId actually contains property name in\n    // current document\n    var oLookupComponents = this._getPathComponents(sLookupPath);\n    var sLookupContextPath = \"/\" + oLookupComponents.collectionName + \"(\" + oCurrentDocument[oLookupComponents.documentId] + \")\";\n\n    // Get context for querying lookup collection if it already exists\n    // or create one\n    var oLookupContext = this.getContext(sLookupContextPath);\n\n    // Call standard getProperty with new context and path property\n    return this.getProperty(oLookupComponents.propertyPath, oLookupContext);\n  };\n\n  /**\n   * @summary Resolves a path and context and returns Mongo components\n   *\n   * @description For a given path and context, return Mongo components such\n   * as collection name, document id.  The remainder of the path is returned\n   * as a value that can be resolved against a document using _.get()\n   *\n   * @param {string}\n   *         sPath the path to where to read the attribute value\n   * @param {object}\n   *\t\t   [oContext=null] the context with which the path should be resolved\n   * @return {object}\n   *         Object containing collectionName, documentId and propertyPath\n   * @private\n   */\n  cModel.prototype._getPathComponents = function (sPath, oContext) {\n\n    // Define object this method returns.  Some or all properties will be\n    // set in this method.\n    var oComponents = {\n      collectionName: \"\",\n      documentId: \"\",\n      propertyPath: \"\"\n    };\n\n    // Resolve path from oContext and sPath into one full path\n    var sFullPath = oContext ? this.resolve(sPath, oContext) : sPath;\n\n    // Validate path\n    var sFirstChar = sFullPath.charAt(0);\n    if (sFirstChar === \"?\") {\n      // Question mark denotes Meteor Mongo model Lookup binding path\n      // Convert it to a regular root (non-relative path)\n      sFullPath = \"/\" + sFullPath.slice(1);\n    } else if (sFirstChar !== \"/\") {\n      var _sError = \"Cannot find root element (Mongo Collection).\";\n      jQuery.sap.log.fatal(_sError);\n      this.fireParseError({\n        srcText: _sError\n      });\n    }\n\n    // Split path into components at forward slash\n    var aComponents = sFullPath.split(\"/\");\n    if (aComponents[0] === \"\") {\n      aComponents.shift();\n    }\n\n    // Validate components\n    if (aComponents.length < 1) {\n      var sError = \"Unsupported binding path: \" + sFullPath;\n      jQuery.sap.log.fatal(sError);\n      oModel.fireParseError({\n        srcText: sError\n      });\n    }\n\n    // Interpret first componet - Collection name - possibly with document id\n    var sCollectionComponent = aComponents[0];\n    var openParens = sCollectionComponent.indexOf(\"(\");\n    if (openParens < 0) {\n      // No document id - whole component is collection name\n      oComponents.collectionName = sCollectionComponent;\n    } else {\n      // Get collection name\n      oComponents.collectionName = sCollectionComponent.substring(0, openParens);\n\n      // Get document id which will either be a string (created by Meteor) or\n      // and ObjectId constructor (created by Mongo via mongo shell, robomongo\n      // external database etc)\n      var sComponentRemaining = sCollectionComponent.substring(openParens);\n      var iOuterParensBegin = 0;\n      var iInnerContentLength = sComponentRemaining.length - 1;\n      var sDocumentId = sComponentRemaining.substring(iOuterParensBegin + 1, iInnerContentLength);\n\n      // If id not just a string but in the form of ObjectId(\"adfadf\") then\n      // create an object id instance\n      if (sDocumentId.startsWith(\"Object\")) {\n        var openQuote = sDocumentId.indexOf('\"');\n        var closeQuote = sDocumentId.indexOf('\"', openQuote + 1);\n        var sInnerDocumentId = sDocumentId.substring(openQuote + 1, closeQuote);\n        oComponents.documentId = new Meteor.Collection.ObjectID(sInnerDocumentId);\n      } else {\n        // Just a regular meteor id string\n        oComponents.documentId = sDocumentId;\n      }\n    }\n\n    // Return remaining components as property path\n    aComponents.shift();\n    var sPropertyPath = aComponents.join('.');\n    if (sPropertyPath) {\n      var iCloseParens = sPropertyPath.indexOf(\")\");\n      if (iCloseParens > -1) {\n        // Replace period directly after closing parenthesis with \"/\"\n        // TODO fix this hack - don't quite understand yet why this is necessary\n        // but seems to be for lookups.\n        var iFirstAfterCloseParens = iCloseParens + 1;\n        if (sPropertyPath.charAt(iFirstAfterCloseParens) === \".\") {\n          sPropertyPath = sPropertyPath.substr(0, iFirstAfterCloseParens) + \"/\" + sPropertyPath.substr(iCloseParens + 1);\n        }\n      }\n    }\n    oComponents.propertyPath = sPropertyPath;\n\n    return oComponents;\n  };\n\n  /**\n   * @summary Builds and runs a Mongo query and returns a cursor\n   *\n   * @description Builds a mongo selector, sort options and runs a query on the\n   * database for a context and path.  It returns a cursor that changes can be\n   * observed on to provide reactive updates.\n   *\n   * @param {string} sPath\n   * @param {sap.ui.model.Context} oContext\n   * @param {array} [aSorters] initial sort order\n   * @param {array} [aFilters] predefined filter/s\n   * @return {object} A mongo cursor\n   * @public\n   */\n  cModel.prototype.runQuery = function (sPath, oContext, aSorters, aFilters) {\n    // Resolve path and get components (collection name, document id)\n    var oPathComponents = this._getPathComponents(sPath, oContext);\n\n    // Get Collection\n    var oCollection = Mongo.Collection.get(oPathComponents.collectionName);\n\n    // Build mongo selector\n    var selector = {};\n    if (oPathComponents.documentId) {\n      selector._id = oPathComponents.documentId;\n    } else if (aFilters && aFilters.length) {\n      selector = this._buildMongoSelector(aFilters);\n    }\n\n    // Build query options\n    var options = {\n      limit: this.iSizeLimit\n    };\n\n    // Build sorter option\n    if (aSorters && aSorters.length) {\n      options.sort = this._buildMongoSortSpecifier(aSorters);\n    }\n\n    // Execute query and return cursor\n    var oCursor = oCollection.find(selector, options);\n    return oCursor;\n  };\n\n  /**\n   * @summary Creates a new ContextBinding\n   *\n   * @param {string | object}\n   *         sPath the path pointing to the property that should be bound or an object\n   *         which contains the following parameter properties: path, context, parameters\n   * @param {object}\n   *         [oContext=null] the context object for this databinding (optional)\n   * @param {object}\n   *         [mParameters=null] additional model specific parameters (optional)\n   * @param {object}\n   *         [oEvents=null] event handlers can be passed to the binding ({change:myHandler})\n   * @return {meteor-ui5-mongo.model.ContextBinding}\n   *\n   * @public\n   */\n  cModel.prototype.bindContext = function (sPath, oContext, mParameters) {\n    var oBinding = new ContextBinding(this, sPath, oContext, mParameters);\n    return oBinding;\n  };\n\n  /**\n   * @summary Destroys the model and clears the model data.\n   *\n   * @public\n   */\n  cModel.prototype.destroy = function () {\n    // Call destroy on each binding where method exists\n    this.aBindings.forEach(function (oBinding) {\n      if (oBinding.hasOwnProperty(\"destroy\")) {\n        oBinding.destroy();\n      }\n    });\n\n    // Call super\n    Model.prototype.destroy.apply(this, arguments);\n  };\n\n  /**\n   * @summary Build Mongo selector for UI5 filters\n   * @param  {sap.ui.filter[]} aFilters An array of UI5 filters\n   * @return {object}          A mongo selector for use with collection.Find or FindOne\n   */\n  cModel.prototype._buildMongoSelector = function (aFilters) {\n    var _this = this;\n\n    var oMongoSelector = {};\n    // Build mongo selector incorporating each filter\n\n    // Build set of properties with an array of filters for each.  These will\n    // will be combined with and/or conditions into the mongo selector later\n    var properties = new Map();\n    aFilters.forEach(function (oFilter) {\n      // Validate: We don't currently support multi-filter\n      if (oFilter._bMultiFilter) {\n        var sError = \"MultiFilter not yet supported by ListBinding.\";\n        jQuery.sap.log.fatal(sError);\n        _this.oModel.fireParseError({\n          srcText: sError\n        });\n        return;\n      }\n\n      // Build mongo expression according to UI5 filter operator\n      // Example filter object:\n      // {sPath: \"Country\", sOperator: \"EQ\", oValue1: \"USA\", oValue2: undefined, _bMultiFilter: false}\n      var oMongoExpression = {};\n      switch (oFilter.sOperator) {\n        case FilterOperator.BT:\n          oMongoExpression[\"$gte\"] = oFilter.oValue1;\n          oMongoExpression[\"$lte\"] = oFilter.oValue2;\n          break;\n        case FilterOperator.Contains:\n          // TODO investigate performance options. Need to also determine if\n          // we can dynamically determine and use $text if a text index has been\n          // created.\n          // In the mean time, build a regex.\n          oMongoExpression[\"$regex\"] = new RegExp(oFilter.oValue1);\n          oMongoExpression[\"$options\"] = \"i\"; // case-insensitive\n          break;\n        case FilterOperator.StartsWith:\n          oMongoExpression[\"$regex\"] = new RegExp(\"^\" + oFilter.oValue1);\n          oMongoExpression[\"$options\"] = \"i\"; // case-insensitive\n          break;\n        case FilterOperator.EndsWith:\n          oMongoExpression[\"$regex\"] = new RegExp(oFilter.oValue1 + \"$\");\n          oMongoExpression[\"$options\"] = \"i\"; // case-insensitive\n          break;\n        case FilterOperator.EQ:\n          // TODO add $eq when supported in mini-mongo (version 1.4?).  Hope this\n          // work around doesn't bite us in the mean time.  Refer:\n          // https://github.com/meteor/meteor/issues/4142\n          oMongoExpression = oFilter.oValue1;\n          break;\n        case FilterOperator.GE:\n          oMongoExpression[\"$gte\"] = oFilter.oValue1;\n        case FilterOperator.GT:\n          oMongoExpression[\"$gt\"] = oFilter.oValue1;\n          break;\n        case FilterOperator.LE:\n          oMongoExpression[\"$lte\"] = oFilter.oValue1;\n          break;\n        case FilterOperator.LT:\n          oMongoExpression[\"$lt\"] = oFilter.oValue1;\n          break;\n        case FilterOperator.NE:\n          //TODO: Test.  Valid in Mongo, not sure if minimongo supports - see\n          // EQ FilterOperator above\n          oMongoExpression[\"$ne\"] = oFilter.oValue1;\n          break;\n        default:\n          var _sError2 = \"Filter operator \" + oFilter.sOperator + \" not supported.\";\n          jQuery.sap.log.fatal(_sError2);\n          _this.oModel.fireParseError({\n            srcText: _sError2\n          });\n          return;\n      }\n\n      // Add current property to the map if it doesn't already exist\n      var propertyName = oFilter.sPath;\n      if (!properties.has(propertyName)) {\n        properties.set(propertyName, []);\n      }\n\n      // Add current property selector to map\n      var propertySelector = {};\n      propertySelector[propertyName] = oMongoExpression;\n      properties.get(propertyName).push(propertySelector);\n    });\n\n    // Combine propery selectors for different properties using mongo $and\n    var $and = [];\n    properties.forEach(function (expressions) {\n      // Combine expressions for single property using mongo $or (if multiple)\n      if (expressions.length === 1) {\n        $and.push(expressions[0]);\n      } else {\n        $and.push({\n          $or: expressions\n        });\n      }\n    });\n\n    if ($and.length > 1) {\n      oMongoSelector[\"$and\"] = $and;\n    } else {\n      oMongoSelector = $and[0];\n    }\n    return oMongoSelector;\n  };\n\n  /**\n   * @summary Build's a mongo sort specifier for use with collection.find()\n   *\n   * @description Takes an array of standard UI5 sorters and converts to a single\n   * Mongo sort specifier.\n   * @param  {sap.ui.model.sorter[]} aSorters An array of UI5 sorters\n   * @return {object}          Mongo sort specifier\n   * @private\n   */\n  cModel.prototype._buildMongoSortSpecifier = function (aSorters) {\n    var _this2 = this;\n\n    var oMongoSortSpecifier = {};\n    aSorters.forEach(function (oSorter) {\n      // Don't know what options need to be supported yet but currently\n      // we only support sorting based on a simple property with ascending or\n      // descending option.  Validate that this sorter seems to meet that\n      // criteria.\n      var bHasSlash = oSorter.sPath.indexOf(\"/\") > -1;\n      var bHasPeriod = oSorter.sPath.indexOf(\".\") > -1;\n      if (bHasSlash || bHasPeriod) {\n        var sError = \"Currently unsupported list sorting path: \" + oSorter.sPath;\n        jQuery.sap.log.fatal(sError);\n        _this2.oModel.fireParseError({\n          srcText: sError\n        });\n        return;\n      }\n\n      // Validate that we don't have a custom comparator function (if not possible\n      // with Mongo read - may be able to add it later as post query javascript\n      // filtering)\n      if (oSorter.fnCompare) {\n        var _sError3 = \"Custom sort comparator functions currently unsupported\";\n        jQuery.sap.log.fatal(_sError3);\n        _this2.oModel.fireParseError({\n          srcText: _sError3\n        });\n        return;\n      }\n\n      // Build mongo sort specifier\n      oMongoSortSpecifier[oSorter.sPath] = oSorter.bDescending ? -1 : 1;\n    });\n\n    return oMongoSortSpecifier;\n  };\n\n  /**\n   * @summary Alternative to lodash _.get so we don't have to include whole library\n   *\n   * @description Code taken from:\n   * https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf\n   * TODO: test that this works in all likely instances\n   *\n   * @param  {object} obj The object containing the desired property\n   * @param  {string} path The path to the property\n   * @param  {*} def Default value if property not found\n   * @return {*} The property value\n   *\n   * @private\n   */\n  cModel.prototype._get = function (obj, path, def) {\n    var fullPath = path.replace(/\\[/g, '.').replace(/]/g, '').split('.').filter(Boolean);\n\n    return fullPath.every(everyFunc) ? obj : def;\n\n    function everyFunc(step) {\n      return !(step && (obj = obj[step]) === undefined);\n    }\n  };\n\n  return cModel;\n});\n//# sourceMappingURL=Model.js.map","ast":null,"map":{"version":3,"sources":["/packages/propellerlabsio:meteor-ui5-mongo/model/Model-dbg.js"],"names":[],"mappings":"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","file":"/packages/propellerlabsio:meteor-ui5-mongo/model/Model-dbg.js.map","sourcesContent":["'use strict';\n\n/**\n * @file meteor-ui5-mongo.model.Model.js\n * @copyright PropellerLabs.io 2016\n * @license Apache-2.0\n *\n * @namespace meteor-ui5-mongo.model\n * @description Meteor UI5 Mongo Model\n */\n/* eslint-disable */\nsap.ui.define(['jquery.sap.global', 'sap/ui/model/Model', 'sap/ui/model/BindingMode', 'sap/ui/model/Context', './DocumentListBinding', './PropertyListBinding', './PropertyBinding', './ContextBinding', 'sap/ui/model/FilterOperator'], function (jQuery, Model, BindingMode, Context, DocumentListBinding, PropertyListBinding, PropertyBinding, ContextBinding, FilterOperator) {\n  \"use strict\";\n\n  /**\n   * @summary Constructor for a new Model.\n   *\n   * @description This model provides the interface between UI5 and a Meteor\n   * application that uses  the Mongo and Minimongo databases.\n   *\n   * @class\n   *\n   * @extends sap.ui.model.Model\n   *\n   * @author PropellerLabs.io\n   * @version ${version}\n   *\n   * @constructor\n   * @public\n   * @alias meteor-ui5-mongo.model.Model\n   */\n\n  var cModel = Model.extend(\"meteor-ui5-mongo.model.Model\", {\n\n    constructor: function constructor(iSizeLimit) {\n      Model.apply(this, arguments);\n\n      this.oData = {};\n      this.bDestroyed = false;\n      this.aBindings = [];\n      this.mContexts = {};\n      this.iSizeLimit = iSizeLimit || 100;\n      this.sDefaultBindingMode = BindingMode.OneWay;\n      this.mSupportedBindingModes = {\n        \"OneWay\": true,\n        \"TwoWay\": false,\n        \"OneTime\": false\n      };\n      this.bLegacySyntax = false;\n      this.sUpdateTimer = null;\n    }\n\n  });\n\n  /**\n   * Return new PropertyBinding for given parameters\n   *\n   * @param {string}\n   *         sPath the path pointing to the property that should be bound\n   * @param {object}\n   *         [oContext=null] the context object for this databinding (optional)\n   * @param {object}\n   *         [mParameters=null] additional model specific parameters (optional)\n   * @return {meteor-ui5-mongo.model.PropertyBinding}\n   *\n   * @public\n   */\n  cModel.prototype.bindProperty = function (sPath, oContext, mParameters) {\n    var oBinding = new PropertyBinding(this, sPath, oContext, mParameters);\n    return oBinding;\n  };\n\n  /**\n   * @summary Return new list binding of appropriate type for given parameters\n   *\n   * @description Returns either a DocumentListBinding or PropetyListBinding\n   * depending on whether we are binding to a list of documents or an array\n   * property in a single document.\n   *\n   * @param {string}\n   *         sPath the path pointing to the list / array that should be bound\n   * @param {object}\n   *         [oContext=null] the context object for this databinding (optional)\n   * @param {sap.ui.model.Sorter}\n   *         [aSorters=null] initial sort order (can be either a sorter or an array of sorters) (optional)\n   * @param {array}\n   *         [aFilters=null] predefined filter/s (can be either a filter or an array of filters) (optional)\n   * @param {object}\n   *         [mParameters=null] additional model specific parameters (optional)\n   * @return {meteor-ui5-mongo.model.DocumentListBinding |\n   *         meteor-ui5-mongo.model.PropertyListBinding}\n    * @public\n   */\n  cModel.prototype.bindList = function (sPath, oContext, aSorters, aFilters, mParameters) {\n    var oBinding;\n    if (oContext) {\n      // Binding list to array property in single document\n      oBinding = new PropertyListBinding(this, sPath, oContext, aSorters, aFilters, mParameters);\n    } else {\n      // Binding list to documents in Mongo\n      oBinding = new DocumentListBinding(this, sPath, oContext, aSorters, aFilters, mParameters);\n    }\n    return oBinding;\n  };\n\n  /**\n   * @summary Tree binding not yet implemented.\n   *\n   * @param {string}\n   *         sPath the path pointing to the tree / array that should be bound\n   * @param {object}\n   *         [oContext=null] the context object for this databinding (optional)\n   * @param {array}\n   *         [aFilters=null] predefined filter/s contained in an array (optional)\n   * @param {object}\n   *         [mParameters=null] additional model specific parameters (optional)\n   * @param {array}\n   *         [aSorters=null] predefined sap.ui.model.sorter/s contained in an array (optional)\n   * @return {meteor-ui5-mongo.model.TreeBinding}\n    * @public\n   */\n  // TODO implement this.  Check first if controls that use this haven't all been\n  // deprecated.\n\n  /**\n   * @summary Create binding context.\n   *\n   * @description Implementation copied from sap.ui.model.ClientModel\n   *\n   * @param {string}\n   *         sPath the path to create the new context from\n   * @param {object}\n   *\t\t   [oContext=null] the context which should be used to create the new binding context\n   * @param {object}\n   *\t\t   [mParameters=null] the parameters used to create the new binding context\n   * @param {function}\n   *         [fnCallBack] the function which should be called after the binding context has been created\n   * @param {boolean}\n   *         [bReload] force reload even if data is already available. For server side models this should\n   *                   refetch the data from the server\n   * @return {sap.ui.model.Context} the binding context, if it could be created synchronously\n   *\n   * @public\n   */\n  cModel.prototype.createBindingContext = function (sPath, oContext, mParameters, fnCallBack) {\n    // optional parameter handling\n    if (typeof oContext == \"function\") {\n      fnCallBack = oContext;\n      oContext = null;\n    }\n    if (typeof mParameters == \"function\") {\n      fnCallBack = mParameters;\n      mParameters = null;\n    }\n    // resolve path and create context\n    var sContextPath = this.resolve(sPath, oContext),\n        oNewContext = sContextPath == undefined ? undefined : this.getContext(sContextPath ? sContextPath : \"/\");\n    if (!oNewContext) {\n      oNewContext = null;\n    }\n    if (fnCallBack) {\n      fnCallBack(oNewContext);\n    }\n    return oNewContext;\n  };\n\n  /**\n   * @summary Destroys a binding context\n   *\n   * @param {object}\n   *         oContext to destroy\n   * @public\n   */\n  cModel.prototype.destroyBindingContext = function (oContext) {\n    if (oContext.hasOwnProperty(\"destroy\")) {\n      oContext.destroy();\n    }\n  };\n\n  /**\n   * @summary Returns the value of a property at a given path in a given context.\n   *\n   * @description Resolves a context and path and returns the value (of any\n   * data type).  This method also handles Lookup Property paths in the form of\n   * ?Customers(\"CustomerID\") where ?Customers is the Mongo collection to be\n   * queried and \"CustomerId\" is the name of the property at the current path\n   * that contains the unique Mongo Id of the customer document.\n   * @see meteor-ui5-mongo.model.Model.prototype._getLookupProperty\n   *\n   * @param {string}\n   *         sPath the path to where to read the attribute value\n   * @param {object}\n   *\t\t   [oContext=null] the context with which the path should be resolved\n   * @return {object|object[]|string|number}\n   * @public\n   */\n  cModel.prototype.getProperty = function (sPath, oContext) {\n    var propertyValue = void 0;\n\n    // Check we have a context or we can't return a property - not yet sure\n    // why this is sometimes being called when context hasn't been set yet\n    // (ie from Grid Table)\n    if (!oContext) {\n      return;\n    }\n\n    // Get single document\n    var oComponents = this._getPathComponents(sPath, oContext);\n    // collectionName: \"\",\n    // documentId: \"\",\n    // propertyPath: \"\",\n    var document = Mongo.Collection.get(oComponents.collectionName).findOne(oComponents.documentId);\n    if (document) {\n      if (oComponents.propertyPath) {\n        // Return property\n        if (oComponents.propertyPath.charAt(0) === \"?\") {\n          propertyValue = this._getLookupProperty(document, oComponents.propertyPath);\n        } else {\n          // Regular property - get from current document\n          propertyValue = this._get(document, oComponents.propertyPath);\n        }\n      } else {\n        // Return document (e.g. called by getObject)\n        propertyValue = document;\n      }\n    }\n\n    return propertyValue;\n  };\n\n  /**\n   * @summary Returns the value of a property for a lookup query\n   *\n   * @description This method handles Lookup Property paths in the form of\n   * ?Customers(\"CustomerID\") where ?Customers is the Mongo collection to be\n   * queried and \"CustomerId\" is the name of the property in the current document\n   * that contains the unique Mongo Id of the customer document.\n   *\n   * @param {object}\n   *\t\t   oCurrentDocument the document containing the id of the lookup document\n   * @param {string}\n   *         sLookupPath the path to where to read the attribute value\n   * @return {object|object[]|string|number}\n   * @private\n   */\n  cModel.prototype._getLookupProperty = function (oCurrentDocument, sLookupPath) {\n    // Build context path for querying lookup collection.  Note:\n    // components.documentId actually contains property name in\n    // current document\n    var oLookupComponents = this._getPathComponents(sLookupPath);\n    var sLookupContextPath = \"/\" + oLookupComponents.collectionName + \"(\" + oCurrentDocument[oLookupComponents.documentId] + \")\";\n\n    // Get context for querying lookup collection if it already exists\n    // or create one\n    var oLookupContext = this.getContext(sLookupContextPath);\n\n    // Call standard getProperty with new context and path property\n    return this.getProperty(oLookupComponents.propertyPath, oLookupContext);\n  };\n\n  /**\n   * @summary Resolves a path and context and returns Mongo components\n   *\n   * @description For a given path and context, return Mongo components such\n   * as collection name, document id.  The remainder of the path is returned\n   * as a value that can be resolved against a document using _.get()\n   *\n   * @param {string}\n   *         sPath the path to where to read the attribute value\n   * @param {object}\n   *\t\t   [oContext=null] the context with which the path should be resolved\n   * @return {object}\n   *         Object containing collectionName, documentId and propertyPath\n   * @private\n   */\n  cModel.prototype._getPathComponents = function (sPath, oContext) {\n\n    // Define object this method returns.  Some or all properties will be\n    // set in this method.\n    var oComponents = {\n      collectionName: \"\",\n      documentId: \"\",\n      propertyPath: \"\"\n    };\n\n    // Resolve path from oContext and sPath into one full path\n    var sFullPath = oContext ? this.resolve(sPath, oContext) : sPath;\n\n    // Validate path\n    var sFirstChar = sFullPath.charAt(0);\n    if (sFirstChar === \"?\") {\n      // Question mark denotes Meteor Mongo model Lookup binding path\n      // Convert it to a regular root (non-relative path)\n      sFullPath = \"/\" + sFullPath.slice(1);\n    } else if (sFirstChar !== \"/\") {\n      var _sError = \"Cannot find root element (Mongo Collection).\";\n      jQuery.sap.log.fatal(_sError);\n      this.fireParseError({\n        srcText: _sError\n      });\n    }\n\n    // Split path into components at forward slash\n    var aComponents = sFullPath.split(\"/\");\n    if (aComponents[0] === \"\") {\n      aComponents.shift();\n    }\n\n    // Validate components\n    if (aComponents.length < 1) {\n      var sError = \"Unsupported binding path: \" + sFullPath;\n      jQuery.sap.log.fatal(sError);\n      oModel.fireParseError({\n        srcText: sError\n      });\n    }\n\n    // Interpret first componet - Collection name - possibly with document id\n    var sCollectionComponent = aComponents[0];\n    var openParens = sCollectionComponent.indexOf(\"(\");\n    if (openParens < 0) {\n      // No document id - whole component is collection name\n      oComponents.collectionName = sCollectionComponent;\n    } else {\n      // Get collection name\n      oComponents.collectionName = sCollectionComponent.substring(0, openParens);\n\n      // Get document id which will either be a string (created by Meteor) or\n      // and ObjectId constructor (created by Mongo via mongo shell, robomongo\n      // external database etc)\n      var sComponentRemaining = sCollectionComponent.substring(openParens);\n      var iOuterParensBegin = 0;\n      var iInnerContentLength = sComponentRemaining.length - 1;\n      var sDocumentId = sComponentRemaining.substring(iOuterParensBegin + 1, iInnerContentLength);\n\n      // If id not just a string but in the form of ObjectId(\"adfadf\") then\n      // create an object id instance\n      if (sDocumentId.startsWith(\"Object\")) {\n        var openQuote = sDocumentId.indexOf('\"');\n        var closeQuote = sDocumentId.indexOf('\"', openQuote + 1);\n        var sInnerDocumentId = sDocumentId.substring(openQuote + 1, closeQuote);\n        oComponents.documentId = new Meteor.Collection.ObjectID(sInnerDocumentId);\n      } else {\n        // Just a regular meteor id string\n        oComponents.documentId = sDocumentId;\n      }\n    }\n\n    // Return remaining components as property path\n    aComponents.shift();\n    var sPropertyPath = aComponents.join('.');\n    if (sPropertyPath) {\n      var iCloseParens = sPropertyPath.indexOf(\")\");\n      if (iCloseParens > -1) {\n        // Replace period directly after closing parenthesis with \"/\"\n        // TODO fix this hack - don't quite understand yet why this is necessary\n        // but seems to be for lookups.\n        var iFirstAfterCloseParens = iCloseParens + 1;\n        if (sPropertyPath.charAt(iFirstAfterCloseParens) === \".\") {\n          sPropertyPath = sPropertyPath.substr(0, iFirstAfterCloseParens) + \"/\" + sPropertyPath.substr(iCloseParens + 1);\n        }\n      }\n    }\n    oComponents.propertyPath = sPropertyPath;\n\n    return oComponents;\n  };\n\n  /**\n   * @summary Builds and runs a Mongo query and returns a cursor\n   *\n   * @description Builds a mongo selector, sort options and runs a query on the\n   * database for a context and path.  It returns a cursor that changes can be\n   * observed on to provide reactive updates.\n   *\n   * @param {string} sPath\n   * @param {sap.ui.model.Context} oContext\n   * @param {array} [aSorters] initial sort order\n   * @param {array} [aFilters] predefined filter/s\n   * @return {object} A mongo cursor\n   * @public\n   */\n  cModel.prototype.runQuery = function (sPath, oContext, aSorters, aFilters) {\n    // Resolve path and get components (collection name, document id)\n    var oPathComponents = this._getPathComponents(sPath, oContext);\n\n    // Get Collection\n    var oCollection = Mongo.Collection.get(oPathComponents.collectionName);\n\n    // Build mongo selector\n    var selector = {};\n    if (oPathComponents.documentId) {\n      selector._id = oPathComponents.documentId;\n    } else if (aFilters && aFilters.length) {\n      selector = this._buildMongoSelector(aFilters);\n    }\n\n    // Build query options\n    var options = {\n      limit: this.iSizeLimit\n    };\n\n    // Build sorter option\n    if (aSorters && aSorters.length) {\n      options.sort = this._buildMongoSortSpecifier(aSorters);\n    }\n\n    // Execute query and return cursor\n    var oCursor = oCollection.find(selector, options);\n    return oCursor;\n  };\n\n  /**\n   * @summary Creates a new ContextBinding\n   *\n   * @param {string | object}\n   *         sPath the path pointing to the property that should be bound or an object\n   *         which contains the following parameter properties: path, context, parameters\n   * @param {object}\n   *         [oContext=null] the context object for this databinding (optional)\n   * @param {object}\n   *         [mParameters=null] additional model specific parameters (optional)\n   * @param {object}\n   *         [oEvents=null] event handlers can be passed to the binding ({change:myHandler})\n   * @return {meteor-ui5-mongo.model.ContextBinding}\n   *\n   * @public\n   */\n  cModel.prototype.bindContext = function (sPath, oContext, mParameters) {\n    var oBinding = new ContextBinding(this, sPath, oContext, mParameters);\n    return oBinding;\n  };\n\n  /**\n   * @summary Destroys the model and clears the model data.\n   *\n   * @public\n   */\n  cModel.prototype.destroy = function () {\n    // Call destroy on each binding where method exists\n    this.aBindings.forEach(function (oBinding) {\n      if (oBinding.hasOwnProperty(\"destroy\")) {\n        oBinding.destroy();\n      }\n    });\n\n    // Call super\n    Model.prototype.destroy.apply(this, arguments);\n  };\n\n  /**\n   * @summary Build Mongo selector for UI5 filters\n   * @param  {sap.ui.filter[]} aFilters An array of UI5 filters\n   * @return {object}          A mongo selector for use with collection.Find or FindOne\n   */\n  cModel.prototype._buildMongoSelector = function (aFilters) {\n    var _this = this;\n\n    var oMongoSelector = {};\n    // Build mongo selector incorporating each filter\n\n    // Build set of properties with an array of filters for each.  These will\n    // will be combined with and/or conditions into the mongo selector later\n    var properties = new Map();\n    aFilters.forEach(function (oFilter) {\n      // Validate: We don't currently support multi-filter\n      if (oFilter._bMultiFilter) {\n        var sError = \"MultiFilter not yet supported by ListBinding.\";\n        jQuery.sap.log.fatal(sError);\n        _this.oModel.fireParseError({\n          srcText: sError\n        });\n        return;\n      }\n\n      // Build mongo expression according to UI5 filter operator\n      // Example filter object:\n      // {sPath: \"Country\", sOperator: \"EQ\", oValue1: \"USA\", oValue2: undefined, _bMultiFilter: false}\n      var oMongoExpression = {};\n      switch (oFilter.sOperator) {\n        case FilterOperator.BT:\n          oMongoExpression[\"$gte\"] = oFilter.oValue1;\n          oMongoExpression[\"$lte\"] = oFilter.oValue2;\n          break;\n        case FilterOperator.Contains:\n          // TODO investigate performance options. Need to also determine if\n          // we can dynamically determine and use $text if a text index has been\n          // created.\n          // In the mean time, build a regex.\n          oMongoExpression[\"$regex\"] = new RegExp(oFilter.oValue1);\n          oMongoExpression[\"$options\"] = \"i\"; // case-insensitive\n          break;\n        case FilterOperator.StartsWith:\n          oMongoExpression[\"$regex\"] = new RegExp(\"^\" + oFilter.oValue1);\n          oMongoExpression[\"$options\"] = \"i\"; // case-insensitive\n          break;\n        case FilterOperator.EndsWith:\n          oMongoExpression[\"$regex\"] = new RegExp(oFilter.oValue1 + \"$\");\n          oMongoExpression[\"$options\"] = \"i\"; // case-insensitive\n          break;\n        case FilterOperator.EQ:\n          // TODO add $eq when supported in mini-mongo (version 1.4?).  Hope this\n          // work around doesn't bite us in the mean time.  Refer:\n          // https://github.com/meteor/meteor/issues/4142\n          oMongoExpression = oFilter.oValue1;\n          break;\n        case FilterOperator.GE:\n          oMongoExpression[\"$gte\"] = oFilter.oValue1;\n        case FilterOperator.GT:\n          oMongoExpression[\"$gt\"] = oFilter.oValue1;\n          break;\n        case FilterOperator.LE:\n          oMongoExpression[\"$lte\"] = oFilter.oValue1;\n          break;\n        case FilterOperator.LT:\n          oMongoExpression[\"$lt\"] = oFilter.oValue1;\n          break;\n        case FilterOperator.NE:\n          //TODO: Test.  Valid in Mongo, not sure if minimongo supports - see\n          // EQ FilterOperator above\n          oMongoExpression[\"$ne\"] = oFilter.oValue1;\n          break;\n        default:\n          var _sError2 = \"Filter operator \" + oFilter.sOperator + \" not supported.\";\n          jQuery.sap.log.fatal(_sError2);\n          _this.oModel.fireParseError({\n            srcText: _sError2\n          });\n          return;\n      }\n\n      // Add current property to the map if it doesn't already exist\n      var propertyName = oFilter.sPath;\n      if (!properties.has(propertyName)) {\n        properties.set(propertyName, []);\n      }\n\n      // Add current property selector to map\n      var propertySelector = {};\n      propertySelector[propertyName] = oMongoExpression;\n      properties.get(propertyName).push(propertySelector);\n    });\n\n    // Combine propery selectors for different properties using mongo $and\n    var $and = [];\n    properties.forEach(function (expressions) {\n      // Combine expressions for single property using mongo $or (if multiple)\n      if (expressions.length === 1) {\n        $and.push(expressions[0]);\n      } else {\n        $and.push({\n          $or: expressions\n        });\n      }\n    });\n\n    if ($and.length > 1) {\n      oMongoSelector[\"$and\"] = $and;\n    } else {\n      oMongoSelector = $and[0];\n    }\n    return oMongoSelector;\n  };\n\n  /**\n   * @summary Build's a mongo sort specifier for use with collection.find()\n   *\n   * @description Takes an array of standard UI5 sorters and converts to a single\n   * Mongo sort specifier.\n   * @param  {sap.ui.model.sorter[]} aSorters An array of UI5 sorters\n   * @return {object}          Mongo sort specifier\n   * @private\n   */\n  cModel.prototype._buildMongoSortSpecifier = function (aSorters) {\n    var _this2 = this;\n\n    var oMongoSortSpecifier = {};\n    aSorters.forEach(function (oSorter) {\n      // Don't know what options need to be supported yet but currently\n      // we only support sorting based on a simple property with ascending or\n      // descending option.  Validate that this sorter seems to meet that\n      // criteria.\n      var bHasSlash = oSorter.sPath.indexOf(\"/\") > -1;\n      var bHasPeriod = oSorter.sPath.indexOf(\".\") > -1;\n      if (bHasSlash || bHasPeriod) {\n        var sError = \"Currently unsupported list sorting path: \" + oSorter.sPath;\n        jQuery.sap.log.fatal(sError);\n        _this2.oModel.fireParseError({\n          srcText: sError\n        });\n        return;\n      }\n\n      // Validate that we don't have a custom comparator function (if not possible\n      // with Mongo read - may be able to add it later as post query javascript\n      // filtering)\n      if (oSorter.fnCompare) {\n        var _sError3 = \"Custom sort comparator functions currently unsupported\";\n        jQuery.sap.log.fatal(_sError3);\n        _this2.oModel.fireParseError({\n          srcText: _sError3\n        });\n        return;\n      }\n\n      // Build mongo sort specifier\n      oMongoSortSpecifier[oSorter.sPath] = oSorter.bDescending ? -1 : 1;\n    });\n\n    return oMongoSortSpecifier;\n  };\n\n  /**\n   * @summary Alternative to lodash _.get so we don't have to include whole library\n   *\n   * @description Code taken from:\n   * https://gist.github.com/jeneg/9767afdcca45601ea44930ea03e0febf\n   * TODO: test that this works in all likely instances\n   *\n   * @param  {object} obj The object containing the desired property\n   * @param  {string} path The path to the property\n   * @param  {*} def Default value if property not found\n   * @return {*} The property value\n   *\n   * @private\n   */\n  cModel.prototype._get = function (obj, path, def) {\n    var fullPath = path.replace(/\\[/g, '.').replace(/]/g, '').split('.').filter(Boolean);\n\n    return fullPath.every(everyFunc) ? obj : def;\n\n    function everyFunc(step) {\n      return !(step && (obj = obj[step]) === undefined);\n    }\n  };\n\n  return cModel;\n});\n//# sourceMappingURL=Model.js.map\n"]},"hash":"aec06c0d1611a46f1ea9ad6eb8466a4ce98551b7"}
