{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/propellerlabsio:meteor-ui5-mongo/model/DocumentListBinding-dbg.js","filenameRelative":"/packages/propellerlabsio:meteor-ui5-mongo/model/DocumentListBinding-dbg.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/propellerlabsio:meteor-ui5-mongo/model/DocumentListBinding-dbg.js.map","sourceFileName":"/packages/propellerlabsio:meteor-ui5-mongo/model/DocumentListBinding-dbg.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"DocumentListBinding-dbg"},"ignored":false,"code":"'use strict';\n\n/**\n * @file meteor-ui5-mongo.model.DocumentListBinding.js\n * @copyright PropellerLabs.io 2016\n * @license Apache-2.0\n */\n/* eslint-disable */\n\nsap.ui.define(['jquery.sap.global', 'sap/ui/model/ListBinding', 'sap/ui/model/Context', 'sap/ui/model/ChangeReason', 'sap/ui/model/Filter'], function (jQuery, ListBinding, Context, ChangeReason, Filter) {\n  \"use strict\";\n\n  /**\n   * @summary Constructor for DocumentListBinding\n   *\n   * @class\n   * @description Provides a specialized context binding that can be used to\n   * bind to several documents in a Meteor Mongo Collection.  It is this type\n   * of ContextBinding that is used when, for example, an object header is\n   * bound to a path like \"/Orders\".  The results can be restricted via the\n   * aFilters parameter.\n   *\n   * Each instance of this class observes changes on a query handle to provide\n   * reactive updates via firing events.\n   *\n   * @param {meteor-ui5-mongo.model.Model} oModel\n   * @param {string} sPath\n   * @param {sap.ui.model.Context} oContext\n   * @param {array} [aSorters] initial sort order (can be either a sorter or an array of sorters)\n   * @param {array} [aFilters] predefined filter/s (can be either a filter or an array of filters)\n   * @param {object} [mParameters]\n   *\n   * @public\n   * @alias meteor-ui5-mongo.model.DocumentListBinding\n   * @extends sap.ui.model.ListBinding\n   */\n\n  var cDocumentListBinding = ListBinding.extend(\"meteor-ui5-mongo.model.DocumentListBinding\", {\n\n    constructor: function constructor(oModel, sPath, oContext, aSorters, aFilters, mParameters) {\n\n      ListBinding.call(this, oModel, sPath, oContext, aSorters, aFilters, mParameters);\n\n      // Set up array for storing contexts\n      this._aContexts = [];\n\n      // Build and run query\n      this._runQuery();\n    }\n\n  });\n\n  /**\n   * @summary Returns an array of binding contexts for the bound target list.\n   *\n   * @description <strong>Note:</strong>The parent class method documentation\n   * indicates tht public usage of this method is deprecated use {@link meteor-ui5-mongo.model.DocumentListBinding.prototype.getCurrentContexts}\n   * instead.\n   *\n   * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts\n   * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index.\n   * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list\n   *\n   * @protected\n   */\n  cDocumentListBinding.prototype.getContexts = function (iStartIndex, iLength) {\n    // TODO Optimize the interplay between this method and the observeChanges.added\n    // code added to the query.  It's exponentially better than it was but is still\n    // being called every time dataChange is fired so if the query results\n    // in say 830 records, then it is called 830 times returning 0..830 records.\n    // NOTE above does not seem to impact performace with local testing of 830\n    // records so may be a low priority issue or no issue at all.\n    var iStart = iStartIndex === undefined ? 0 : iStartIndex;\n    var iLen = iLength === undefined ? this.oModel.iSizeLimit - iStart : iLength;\n    return this._aContexts.slice(iStart).splice(0, iLen);\n  };\n\n  /**\n   * @summary Clean-up no longer needed resources when this context binding is\n   * destroyed.\n   *\n   * @description Stop observing changes in the existing query or it will run\n   * forever.\n   * @public\n   */\n  cDocumentListBinding.prototype.destroy = function () {\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n  };\n\n  /**\n   * @summary Filters the list according to the filter definitions\n   *\n   * @param {object[]} aFilters Array of filter objects\n   * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies\n   * @return {meteor-ui5-mongo.model.DocumentListBinding} returns <code>this</code> to facilitate method chaining\n   *\n   * @public\n   */\n  cDocumentListBinding.prototype.filter = function (aFilters, sFilterType) {\n    // Replace contents of aFilters property\n    this.aFilters = [];\n    if (!jQuery.isArray(aFilters) && aFilters instanceof Filter) {\n      aFilters = [aFilters];\n    } else if (!jQuery.isArray(aFilters)) {\n      aFilters = [];\n    }\n    this.aApplicationFilters = aFilters;\n\n    // Re-run query\n    this._runQuery();\n\n    return this;\n  };\n\n  /**\n   * Sorts the list according to the sorter object\n   *\n   * @param {sap.ui.model.Sorter|Array} aSorters the Sorter object or an array of sorters which defines the sort order\n   * @return {meteor-ui5-mongo.model.DocumentListBinding} returns <code>this</code> to facilitate method chaining\n   * @public\n   */\n  cDocumentListBinding.prototype.sort = function (aSorters) {\n    // Replace contents of aSorters property\n    Array.isArray(aSorters) ? this.aSorters = aSorters : this.aSorters = [aSorters];\n\n    // Re-run query\n    this._runQuery();\n\n    return this;\n  };\n\n  /**\n   * @summary Returns the number of entries in the list.\n   *\n   * @description This might be an estimated or preliminary length, in case\n   * the full length is not known yet, see method isLengthFinal().\n   *\n   * @return {int} returns the number of entries in the list\n   * @public\n   */\n  cDocumentListBinding.prototype.getLength = function () {\n    return this._aContexts.length;\n  };\n\n  /**\n   * @summary Returns whether the length of the list is final\n   *\n   * @description Returns whether the length which can be retrieved using getLength()\n   * is a known, final length, or an preliminary or estimated length which may\n   * change if further data is requested.\n   *\n   * @return {boolean} returns whether the length is final\n   * @public\n   */\n  cDocumentListBinding.prototype.isLengthFinal = function () {\n    // TODO don't know what to do here yet.  Can't get this method\n    // to trigger and in any case, the only way to calculate if queryHandle.count()\n    // is final is to introduce subscriptions to the model which I've been\n    // keen to avoid as it will complicate the hell out of things whereas\n    // having it outside of the model is quite simple.  There's a discussion\n    // on the issue here:\n    // http://stackoverflow.com/questions/18744665/how-to-get-a-published-collections-total-count-regardless-of-a-specified-limit\n    // In the mean time return false;\n    return false;\n  };\n\n  /**\n   * Returns list of distinct values for the given relative binding path\n   *\n   * @param {string} sPath the relative binding path\n   * @return {Array} the array of distinct values.\n   *\n   * @public\n   */\n  cDocumentListBinding.prototype.getDistinctValues = function (sPath) {\n    // TODO what's supposed to go here?\n    return null;\n  };\n\n  /**\n   * @summary Execute Mongo query for current path and context and observe changes.\n   *\n   * @description This method runs the query for this context binding and provides\n   * reactivity by observing changes in the query and firing events on change.\n   * @private\n   */\n  cDocumentListBinding.prototype._runQuery = function () {\n    var _this = this;\n\n    // Stop observing changes in any existing query.  Will run forever otherwise.\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n\n    // Reset existing contexts\n    this._aContexts = [];\n    this._fireChange(ChangeReason.remove);\n\n    // Run query\n    var oCursor = this.oModel.runQuery(this.sPath, this.oContext, this.aSorters, this.aApplicationFilters);\n\n    // Create query handle so we can observe changes\n    // var that = this;\n    this._oQueryHandle = oCursor.observeChanges({\n      addedBefore: function addedBefore(id, fields, before) {\n        // Create context\n        var sDocumentPath = _this._getDocumentPath(id);\n        var oContext = new Context(_this.oModel, sDocumentPath);\n        if (before) {\n          // Insert context before existing context\n          var sBeforeDocumentPath = _this._getDocumentPath(before);\n          var iBeforeIndex = _this._getContextIndex(sBeforeDocumentPath);\n          _this._aContexts.splice(iBeforeIndex, 0, oContext);\n        } else {\n          _this._aContexts.push(oContext);\n        }\n        _this.fireDataReceived();\n        _this._fireChange(ChangeReason.add);\n      },\n\n      changed: function changed() {\n        // TODO performance - work out how to only update data that has changed\n        _this.oModel.refresh();\n      },\n\n      removed: function removed(id) {\n        // Remove context for document\n        var sDocumentPath = _this._getDocumentPath(id);\n        var iContextIndex = _this._getContextIndex(sDocumentPath);\n        _this._aContexts.splice(iContextIndex, 1);\n\n        // TODO performance - work out how to only update data that has changed\n        _this.oModel.refresh();\n      }\n    });\n  };\n\n  /**\n   * @summary Return a path for a single document given a document id\n   * @param  {string|object} sDocumentId  Id of document\n   * @return {string}                    Path of document\n   * @private\n   */\n  cDocumentListBinding.prototype._getDocumentPath = function _getDocumentPath(sDocumentId) {\n    // Allow for Mongo ID's that are objects - etc ObjectId('12345')\n    // by using toString() - will also work with regular string ids\n    return this.sPath + '(' + sDocumentId.toString() + ')';\n  };\n\n  /**\n   * @summary Get index of existing context based on document path\n   * @param  {string} sDocumentPath Path of document\n   * @return {number}               Index of document in this._aContexts\n   * @private\n   */\n  cDocumentListBinding.prototype._getContextIndex = function _getContextIndex(sDocumentPath) {\n    return this._aContexts.findIndex(function (oContext) {\n      return oContext.sPath === sDocumentPath;\n    });\n  };\n\n  return cDocumentListBinding;\n});\n//# sourceMappingURL=DocumentListBinding.js.map","ast":null,"map":{"version":3,"sources":["/packages/propellerlabsio:meteor-ui5-mongo/model/DocumentListBinding-dbg.js"],"names":[],"mappings":"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","file":"/packages/propellerlabsio:meteor-ui5-mongo/model/DocumentListBinding-dbg.js.map","sourcesContent":["'use strict';\n\n/**\n * @file meteor-ui5-mongo.model.DocumentListBinding.js\n * @copyright PropellerLabs.io 2016\n * @license Apache-2.0\n */\n/* eslint-disable */\nsap.ui.define(['jquery.sap.global', 'sap/ui/model/ListBinding', 'sap/ui/model/Context', 'sap/ui/model/ChangeReason', 'sap/ui/model/Filter'], function (jQuery, ListBinding, Context, ChangeReason, Filter) {\n  \"use strict\";\n\n  /**\n   * @summary Constructor for DocumentListBinding\n   *\n   * @class\n   * @description Provides a specialized context binding that can be used to\n   * bind to several documents in a Meteor Mongo Collection.  It is this type\n   * of ContextBinding that is used when, for example, an object header is\n   * bound to a path like \"/Orders\".  The results can be restricted via the\n   * aFilters parameter.\n   *\n   * Each instance of this class observes changes on a query handle to provide\n   * reactive updates via firing events.\n   *\n   * @param {meteor-ui5-mongo.model.Model} oModel\n   * @param {string} sPath\n   * @param {sap.ui.model.Context} oContext\n   * @param {array} [aSorters] initial sort order (can be either a sorter or an array of sorters)\n   * @param {array} [aFilters] predefined filter/s (can be either a filter or an array of filters)\n   * @param {object} [mParameters]\n   *\n   * @public\n   * @alias meteor-ui5-mongo.model.DocumentListBinding\n   * @extends sap.ui.model.ListBinding\n   */\n\n  var cDocumentListBinding = ListBinding.extend(\"meteor-ui5-mongo.model.DocumentListBinding\", {\n\n    constructor: function constructor(oModel, sPath, oContext, aSorters, aFilters, mParameters) {\n\n      ListBinding.call(this, oModel, sPath, oContext, aSorters, aFilters, mParameters);\n\n      // Set up array for storing contexts\n      this._aContexts = [];\n\n      // Build and run query\n      this._runQuery();\n    }\n\n  });\n\n  /**\n   * @summary Returns an array of binding contexts for the bound target list.\n   *\n   * @description <strong>Note:</strong>The parent class method documentation\n   * indicates tht public usage of this method is deprecated use {@link meteor-ui5-mongo.model.DocumentListBinding.prototype.getCurrentContexts}\n   * instead.\n   *\n   * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts\n   * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index.\n   * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list\n   *\n   * @protected\n   */\n  cDocumentListBinding.prototype.getContexts = function (iStartIndex, iLength) {\n    // TODO Optimize the interplay between this method and the observeChanges.added\n    // code added to the query.  It's exponentially better than it was but is still\n    // being called every time dataChange is fired so if the query results\n    // in say 830 records, then it is called 830 times returning 0..830 records.\n    // NOTE above does not seem to impact performace with local testing of 830\n    // records so may be a low priority issue or no issue at all.\n    var iStart = iStartIndex === undefined ? 0 : iStartIndex;\n    var iLen = iLength === undefined ? this.oModel.iSizeLimit - iStart : iLength;\n    return this._aContexts.slice(iStart).splice(0, iLen);\n  };\n\n  /**\n   * @summary Clean-up no longer needed resources when this context binding is\n   * destroyed.\n   *\n   * @description Stop observing changes in the existing query or it will run\n   * forever.\n   * @public\n   */\n  cDocumentListBinding.prototype.destroy = function () {\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n  };\n\n  /**\n   * @summary Filters the list according to the filter definitions\n   *\n   * @param {object[]} aFilters Array of filter objects\n   * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies\n   * @return {meteor-ui5-mongo.model.DocumentListBinding} returns <code>this</code> to facilitate method chaining\n   *\n   * @public\n   */\n  cDocumentListBinding.prototype.filter = function (aFilters, sFilterType) {\n    // Replace contents of aFilters property\n    this.aFilters = [];\n    if (!jQuery.isArray(aFilters) && aFilters instanceof Filter) {\n      aFilters = [aFilters];\n    } else if (!jQuery.isArray(aFilters)) {\n      aFilters = [];\n    }\n    this.aApplicationFilters = aFilters;\n\n    // Re-run query\n    this._runQuery();\n\n    return this;\n  };\n\n  /**\n   * Sorts the list according to the sorter object\n   *\n   * @param {sap.ui.model.Sorter|Array} aSorters the Sorter object or an array of sorters which defines the sort order\n   * @return {meteor-ui5-mongo.model.DocumentListBinding} returns <code>this</code> to facilitate method chaining\n   * @public\n   */\n  cDocumentListBinding.prototype.sort = function (aSorters) {\n    // Replace contents of aSorters property\n    Array.isArray(aSorters) ? this.aSorters = aSorters : this.aSorters = [aSorters];\n\n    // Re-run query\n    this._runQuery();\n\n    return this;\n  };\n\n  /**\n   * @summary Returns the number of entries in the list.\n   *\n   * @description This might be an estimated or preliminary length, in case\n   * the full length is not known yet, see method isLengthFinal().\n   *\n   * @return {int} returns the number of entries in the list\n   * @public\n   */\n  cDocumentListBinding.prototype.getLength = function () {\n    return this._aContexts.length;\n  };\n\n  /**\n   * @summary Returns whether the length of the list is final\n   *\n   * @description Returns whether the length which can be retrieved using getLength()\n   * is a known, final length, or an preliminary or estimated length which may\n   * change if further data is requested.\n   *\n   * @return {boolean} returns whether the length is final\n   * @public\n   */\n  cDocumentListBinding.prototype.isLengthFinal = function () {\n    // TODO don't know what to do here yet.  Can't get this method\n    // to trigger and in any case, the only way to calculate if queryHandle.count()\n    // is final is to introduce subscriptions to the model which I've been\n    // keen to avoid as it will complicate the hell out of things whereas\n    // having it outside of the model is quite simple.  There's a discussion\n    // on the issue here:\n    // http://stackoverflow.com/questions/18744665/how-to-get-a-published-collections-total-count-regardless-of-a-specified-limit\n    // In the mean time return false;\n    return false;\n  };\n\n  /**\n   * Returns list of distinct values for the given relative binding path\n   *\n   * @param {string} sPath the relative binding path\n   * @return {Array} the array of distinct values.\n   *\n   * @public\n   */\n  cDocumentListBinding.prototype.getDistinctValues = function (sPath) {\n    // TODO what's supposed to go here?\n    return null;\n  };\n\n  /**\n   * @summary Execute Mongo query for current path and context and observe changes.\n   *\n   * @description This method runs the query for this context binding and provides\n   * reactivity by observing changes in the query and firing events on change.\n   * @private\n   */\n  cDocumentListBinding.prototype._runQuery = function () {\n    var _this = this;\n\n    // Stop observing changes in any existing query.  Will run forever otherwise.\n    if (this._oQueryHandle) {\n      this._oQueryHandle.stop();\n    }\n\n    // Reset existing contexts\n    this._aContexts = [];\n    this._fireChange(ChangeReason.remove);\n\n    // Run query\n    var oCursor = this.oModel.runQuery(this.sPath, this.oContext, this.aSorters, this.aApplicationFilters);\n\n    // Create query handle so we can observe changes\n    // var that = this;\n    this._oQueryHandle = oCursor.observeChanges({\n      addedBefore: function addedBefore(id, fields, before) {\n        // Create context\n        var sDocumentPath = _this._getDocumentPath(id);\n        var oContext = new Context(_this.oModel, sDocumentPath);\n        if (before) {\n          // Insert context before existing context\n          var sBeforeDocumentPath = _this._getDocumentPath(before);\n          var iBeforeIndex = _this._getContextIndex(sBeforeDocumentPath);\n          _this._aContexts.splice(iBeforeIndex, 0, oContext);\n        } else {\n          _this._aContexts.push(oContext);\n        }\n        _this.fireDataReceived();\n        _this._fireChange(ChangeReason.add);\n      },\n\n      changed: function changed() {\n        // TODO performance - work out how to only update data that has changed\n        _this.oModel.refresh();\n      },\n\n      removed: function removed(id) {\n        // Remove context for document\n        var sDocumentPath = _this._getDocumentPath(id);\n        var iContextIndex = _this._getContextIndex(sDocumentPath);\n        _this._aContexts.splice(iContextIndex, 1);\n\n        // TODO performance - work out how to only update data that has changed\n        _this.oModel.refresh();\n      }\n    });\n  };\n\n  /**\n   * @summary Return a path for a single document given a document id\n   * @param  {string|object} sDocumentId  Id of document\n   * @return {string}                    Path of document\n   * @private\n   */\n  cDocumentListBinding.prototype._getDocumentPath = function _getDocumentPath(sDocumentId) {\n    // Allow for Mongo ID's that are objects - etc ObjectId('12345')\n    // by using toString() - will also work with regular string ids\n    return this.sPath + '(' + sDocumentId.toString() + ')';\n  };\n\n  /**\n   * @summary Get index of existing context based on document path\n   * @param  {string} sDocumentPath Path of document\n   * @return {number}               Index of document in this._aContexts\n   * @private\n   */\n  cDocumentListBinding.prototype._getContextIndex = function _getContextIndex(sDocumentPath) {\n    return this._aContexts.findIndex(function (oContext) {\n      return oContext.sPath === sDocumentPath;\n    });\n  };\n\n  return cDocumentListBinding;\n});\n//# sourceMappingURL=DocumentListBinding.js.map\n"]},"hash":"0cea42e1548767d1b5157c956b582959c8fa4de6"}
