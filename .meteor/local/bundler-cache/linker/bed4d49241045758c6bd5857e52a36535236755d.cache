[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"propellerlabsio:meteor-ui5-debug\":{\"server\":{\"ui5DebugHandler.js\":[\"meteor/webapp\",\"fs\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/propellerlabsio_meteor-ui5-debug/server/ui5DebugHandler.js          //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nvar WebApp;module.import('meteor/webapp',{\"WebApp\":function(v){WebApp=v}});var fs;module.import('fs',{\"default\":function(v){fs=v}});/**\n * Special handler for allowing user to debug their UI5 app under meteor        //\n *                                                                              //\n * We provide this as a convience to user so that when they run their UI5 app   //\n * with the UI5 debug option on it won't fail.  The reason we need this is that\n * UI5 handles the debug option as follows:                                     //\n *                                                                              //\n * 1) Request version of the javascript file with '-dbg' in the file name       //\n * 2) If that 404's, then request the file with the regular filename.           //\n *                                                                              //\n * Meteor however maddeningly returns a 200 for any 'file not found' request    //\n * even for public folder assets and it returns the contents of the             //\n * meteor-generated main html file.  UI5 then tries to load this as a           //\n * javascript file and fails.                                                   //\n *                                                                              //\n * Our handler below, intercepts any request for the 'webapp' public folder and\n * if the file name contains '-dbg' and ends in '.js', checks to see if it      //\n * exists. If it doesn't we return a 404 for UI5 to handle.                     //\n *                                                                              //\n * NOTE: this handler has nothing to do with the models and controls in this    //\n * package.  Our package provides both minified sources and unminified sources  //\n * with '-dbg' in the file name and should therefore never generate a 404.      //\n *                                                                              //\n * TODO: This handler assumes the user is building their UI5 app in the         //\n * public/webapp folder.  This isn't ideal and longer term I'd like to provide  //\n * a more dynamic way of building UI5 apps anyway.                              //\n */                                                                             //\n                                                                                // 28\n                                                                                // 29\n                                                                                //\n/* global __meteor_bootstrap__ */                                               //\n                                                                                //\n// Get file system path to public folder                                        //\nvar publicFolderPath = __meteor_bootstrap__.serverDir + '/../web.browser/app';  // 35\nvar ui5appFolder = '/webapp/';                                                  // 36\n                                                                                //\n// Connect handlers for main webapp folder                                      //\nWebApp.connectHandlers.use(ui5appFolder, function (req, res, next) {            // 39\n  var containsDbg = req.url.indexOf('-dbg') > -1;                               // 40\n  var isJavaScript = req.url.endsWith('.js');                                   // 41\n  if (containsDbg && isJavaScript) {                                            // 42\n    // See if file exists                                                       //\n    var filePath = publicFolderPath + ui5appFolder + req.url;                   // 44\n    try {                                                                       // 45\n      fs.accessSync(filePath, fs.F_OK);                                         // 46\n                                                                                //\n      // If we get here, file exists so let meteor serve it                     //\n      next();                                                                   // 49\n    } catch (e) {                                                               // 50\n      // It isn't accessible, return 404                                        //\n      res.writeHead(404);                                                       // 52\n      res.end();                                                                // 53\n    }                                                                           // 54\n  } else {                                                                      // 55\n    // Not handled by us - pass request to next handler                         //\n    next();                                                                     // 57\n  }                                                                             // 58\n});                                                                             // 59\n//////////////////////////////////////////////////////////////////////////////////\n\n}]}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/propellerlabsio:meteor-ui5-debug/server/ui5DebugHandler.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['propellerlabsio:meteor-ui5-debug'] = {};\n\n})();\n","servePath":"/packages/propellerlabsio_meteor-ui5-debug.js","sourceMap":{"version":3,"sources":["/packages/propellerlabsio:meteor-ui5-debug/server/ui5DebugHandler.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAS,MAAT,QAAuB,eAAvB;AACA,OAAO,EAAP,MAAe,IAAf;;;;;AAMA,IAAM,mBAAsB,qBAAqB,SAA3C,wBAAN;AACA,IAAM,eAAe,UAArB;;;AAGA,OAAO,eAAP,CAAuB,GAAvB,CAA2B,YAA3B,EAAyC,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AAC3D,MAAM,cAAe,IAAI,GAAJ,CAAQ,OAAR,CAAgB,MAAhB,IAA0B,CAAC,CAAhD;AACA,MAAM,eAAe,IAAI,GAAJ,CAAQ,QAAR,CAAiB,KAAjB,CAArB;AACA,MAAI,eAAe,YAAnB,EAAiC;;AAE/B,QAAM,WAAW,mBAAmB,YAAnB,GAAkC,IAAI,GAAvD;AACA,QAAI;AACF,SAAG,UAAH,CAAc,QAAd,EAAwB,GAAG,IAA3B;;;AAGA;AACD,KALD,CAKE,OAAO,CAAP,EAAU;;AAEV,UAAI,SAAJ,CAAc,GAAd;AACA,UAAI,GAAJ;AACD;AACF,GAbD,MAaO;;AAEL;AACD;AACF,CApBD,oF","file":"/packages/propellerlabsio_meteor-ui5-debug.js","sourcesContent":["/**\n * Special handler for allowing user to debug their UI5 app under meteor\n *\n * We provide this as a convience to user so that when they run their UI5 app\n * with the UI5 debug option on it won't fail.  The reason we need this is that\n * UI5 handles the debug option as follows:\n *\n * 1) Request version of the javascript file with '-dbg' in the file name\n * 2) If that 404's, then request the file with the regular filename.\n *\n * Meteor however maddeningly returns a 200 for any 'file not found' request\n * even for public folder assets and it returns the contents of the\n * meteor-generated main html file.  UI5 then tries to load this as a\n * javascript file and fails.\n *\n * Our handler below, intercepts any request for the 'webapp' public folder and\n * if the file name contains '-dbg' and ends in '.js', checks to see if it\n * exists. If it doesn't we return a 404 for UI5 to handle.\n *\n * NOTE: this handler has nothing to do with the models and controls in this\n * package.  Our package provides both minified sources and unminified sources\n * with '-dbg' in the file name and should therefore never generate a 404.\n *\n * TODO: This handler assumes the user is building their UI5 app in the\n * public/webapp folder.  This isn't ideal and longer term I'd like to provide\n * a more dynamic way of building UI5 apps anyway.\n */\nimport { WebApp } from 'meteor/webapp';\nimport fs from 'fs';\n\n/* global __meteor_bootstrap__ */\n\n\n// Get file system path to public folder\nconst publicFolderPath = `${__meteor_bootstrap__.serverDir}/../web.browser/app`;\nconst ui5appFolder = '/webapp/';\n\n// Connect handlers for main webapp folder\nWebApp.connectHandlers.use(ui5appFolder, (req, res, next) => {\n  const containsDbg = (req.url.indexOf('-dbg') > -1);\n  const isJavaScript = req.url.endsWith('.js');\n  if (containsDbg && isJavaScript) {\n    // See if file exists\n    const filePath = publicFolderPath + ui5appFolder + req.url;\n    try {\n      fs.accessSync(filePath, fs.F_OK);\n\n      // If we get here, file exists so let meteor serve it\n      next();\n    } catch (e) {\n      // It isn't accessible, return 404\n      res.writeHead(404);\n      res.end();\n    }\n  } else {\n    // Not handled by us - pass request to next handler\n    next();\n  }\n});\n"]}}]